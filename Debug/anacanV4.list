
anacanV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003540  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003768  08003768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c0  20000000  08003778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000258  200000c0  08003838  000200c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000318  08003838  00020318  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ca2d  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000376c  00000000  00000000  0003cb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00009c37  00000000  00000000  00040289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d70  00000000  00000000  00049ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000cd8  00000000  00000000  0004ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000236b7  00000000  00000000  0004b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013dd6  00000000  00000000  0006efbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cbd54  00000000  00000000  00082d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0014eae9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000023a8  00000000  00000000  0014eb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000c0 	.word	0x200000c0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080036ec 	.word	0x080036ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000c4 	.word	0x200000c4
 8000200:	080036ec 	.word	0x080036ec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b510      	push	{r4, lr}
 80004fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_InitTick+0x40>)
 8000502:	7818      	ldrb	r0, [r3, #0]
 8000504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000508:	fbb3 f3f0 	udiv	r3, r3, r0
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <HAL_InitTick+0x44>)
 800050e:	6810      	ldr	r0, [r2, #0]
 8000510:	fbb0 f0f3 	udiv	r0, r0, r3
 8000514:	f000 fbec 	bl	8000cf0 <HAL_SYSTICK_Config>
 8000518:	b968      	cbnz	r0, 8000536 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051a:	2c0f      	cmp	r4, #15
 800051c:	d901      	bls.n	8000522 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800051e:	2001      	movs	r0, #1
 8000520:	e00a      	b.n	8000538 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000522:	2200      	movs	r2, #0
 8000524:	4621      	mov	r1, r4
 8000526:	f04f 30ff 	mov.w	r0, #4294967295
 800052a:	f000 fba1 	bl	8000c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052e:	4b03      	ldr	r3, [pc, #12]	; (800053c <HAL_InitTick+0x40>)
 8000530:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000532:	2000      	movs	r0, #0
 8000534:	e000      	b.n	8000538 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000536:	2001      	movs	r0, #1
}
 8000538:	bd10      	pop	{r4, pc}
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000
 8000540:	200000bc 	.word	0x200000bc

08000544 <HAL_Init>:
{
 8000544:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <HAL_Init+0x30>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000556:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 fb73 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffc8 	bl	80004fc <HAL_InitTick>
  HAL_MspInit();
 800056c:	f002 fe62 	bl	8003234 <HAL_MspInit>
}
 8000570:	2000      	movs	r0, #0
 8000572:	bd08      	pop	{r3, pc}
 8000574:	40023c00 	.word	0x40023c00

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	6811      	ldr	r1, [r2, #0]
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <HAL_IncTick+0x14>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000120 	.word	0x20000120
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000120 	.word	0x20000120

0800059c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 800059c:	2800      	cmp	r0, #0
 800059e:	f000 80a1 	beq.w	80006e4 <HAL_CAN_Init+0x148>
{
 80005a2:	b538      	push	{r3, r4, r5, lr}
 80005a4:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80005a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80005aa:	b1d3      	cbz	r3, 80005e2 <HAL_CAN_Init+0x46>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80005ac:	6822      	ldr	r2, [r4, #0]
 80005ae:	6813      	ldr	r3, [r2, #0]
 80005b0:	f023 0302 	bic.w	r3, r3, #2
 80005b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005b6:	f7ff ffeb 	bl	8000590 <HAL_GetTick>
 80005ba:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	f012 0f02 	tst.w	r2, #2
 80005c4:	d010      	beq.n	80005e8 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005c6:	f7ff ffe3 	bl	8000590 <HAL_GetTick>
 80005ca:	1b40      	subs	r0, r0, r5
 80005cc:	280a      	cmp	r0, #10
 80005ce:	d9f5      	bls.n	80005bc <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80005d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80005d8:	2305      	movs	r3, #5
 80005da:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80005de:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80005e0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80005e2:	f001 febf 	bl	8002364 <HAL_CAN_MspInit>
 80005e6:	e7e1      	b.n	80005ac <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80005f0:	f7ff ffce 	bl	8000590 <HAL_GetTick>
 80005f4:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 80005f6:	6823      	ldr	r3, [r4, #0]
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	f012 0f01 	tst.w	r2, #1
 80005fe:	d10d      	bne.n	800061c <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000600:	f7ff ffc6 	bl	8000590 <HAL_GetTick>
 8000604:	1b40      	subs	r0, r0, r5
 8000606:	280a      	cmp	r0, #10
 8000608:	d9f5      	bls.n	80005f6 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800060a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000612:	2305      	movs	r3, #5
 8000614:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000618:	2001      	movs	r0, #1
 800061a:	e7e1      	b.n	80005e0 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800061c:	7e22      	ldrb	r2, [r4, #24]
 800061e:	2a01      	cmp	r2, #1
 8000620:	d03d      	beq.n	800069e <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000628:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800062a:	7e63      	ldrb	r3, [r4, #25]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d03b      	beq.n	80006a8 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000630:	6822      	ldr	r2, [r4, #0]
 8000632:	6813      	ldr	r3, [r2, #0]
 8000634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000638:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800063a:	7ea3      	ldrb	r3, [r4, #26]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d039      	beq.n	80006b4 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000640:	6822      	ldr	r2, [r4, #0]
 8000642:	6813      	ldr	r3, [r2, #0]
 8000644:	f023 0320 	bic.w	r3, r3, #32
 8000648:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800064a:	7ee3      	ldrb	r3, [r4, #27]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d037      	beq.n	80006c0 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000650:	6822      	ldr	r2, [r4, #0]
 8000652:	6813      	ldr	r3, [r2, #0]
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800065a:	7f23      	ldrb	r3, [r4, #28]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d035      	beq.n	80006cc <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000660:	6822      	ldr	r2, [r4, #0]
 8000662:	6813      	ldr	r3, [r2, #0]
 8000664:	f023 0308 	bic.w	r3, r3, #8
 8000668:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800066a:	7f63      	ldrb	r3, [r4, #29]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d033      	beq.n	80006d8 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000670:	6822      	ldr	r2, [r4, #0]
 8000672:	6813      	ldr	r3, [r2, #0]
 8000674:	f023 0304 	bic.w	r3, r3, #4
 8000678:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800067a:	68a3      	ldr	r3, [r4, #8]
 800067c:	68e2      	ldr	r2, [r4, #12]
 800067e:	4313      	orrs	r3, r2
 8000680:	6922      	ldr	r2, [r4, #16]
 8000682:	4313      	orrs	r3, r2
 8000684:	6962      	ldr	r2, [r4, #20]
 8000686:	4313      	orrs	r3, r2
 8000688:	6862      	ldr	r2, [r4, #4]
 800068a:	3a01      	subs	r2, #1
 800068c:	6821      	ldr	r1, [r4, #0]
 800068e:	4313      	orrs	r3, r2
 8000690:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000692:	2000      	movs	r0, #0
 8000694:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000696:	2301      	movs	r3, #1
 8000698:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 800069c:	e7a0      	b.n	80005e0 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	e7c0      	b.n	800062a <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006a8:	6822      	ldr	r2, [r4, #0]
 80006aa:	6813      	ldr	r3, [r2, #0]
 80006ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e7c2      	b.n	800063a <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006b4:	6822      	ldr	r2, [r4, #0]
 80006b6:	6813      	ldr	r3, [r2, #0]
 80006b8:	f043 0320 	orr.w	r3, r3, #32
 80006bc:	6013      	str	r3, [r2, #0]
 80006be:	e7c4      	b.n	800064a <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006c0:	6822      	ldr	r2, [r4, #0]
 80006c2:	6813      	ldr	r3, [r2, #0]
 80006c4:	f023 0310 	bic.w	r3, r3, #16
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	e7c6      	b.n	800065a <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006cc:	6822      	ldr	r2, [r4, #0]
 80006ce:	6813      	ldr	r3, [r2, #0]
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e7c8      	b.n	800066a <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006d8:	6822      	ldr	r2, [r4, #0]
 80006da:	6813      	ldr	r3, [r2, #0]
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	e7ca      	b.n	800067a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80006e4:	2001      	movs	r0, #1
}
 80006e6:	4770      	bx	lr

080006e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 80006ec:	f890 5020 	ldrb.w	r5, [r0, #32]
 80006f0:	b2ed      	uxtb	r5, r5
 80006f2:	2d01      	cmp	r5, #1
 80006f4:	d006      	beq.n	8000704 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80006f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80006f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006fc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80006fe:	2501      	movs	r5, #1
  }
}
 8000700:	4628      	mov	r0, r5
 8000702:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000704:	2302      	movs	r3, #2
 8000706:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800070a:	6802      	ldr	r2, [r0, #0]
 800070c:	6813      	ldr	r3, [r2, #0]
 800070e:	f023 0301 	bic.w	r3, r3, #1
 8000712:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000714:	f7ff ff3c 	bl	8000590 <HAL_GetTick>
 8000718:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f013 0f01 	tst.w	r3, #1
 8000722:	d00c      	beq.n	800073e <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000724:	f7ff ff34 	bl	8000590 <HAL_GetTick>
 8000728:	1b83      	subs	r3, r0, r6
 800072a:	2b0a      	cmp	r3, #10
 800072c:	d9f5      	bls.n	800071a <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800072e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000736:	2305      	movs	r3, #5
 8000738:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800073c:	e7e0      	b.n	8000700 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800073e:	2500      	movs	r5, #0
 8000740:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8000742:	e7dd      	b.n	8000700 <HAL_CAN_Start+0x18>

08000744 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000744:	b470      	push	{r4, r5, r6}
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000746:	f890 4020 	ldrb.w	r4, [r0, #32]
 800074a:	b2e4      	uxtb	r4, r4
 800074c:	2c01      	cmp	r4, #1
 800074e:	d004      	beq.n	800075a <HAL_CAN_AddTxMessage+0x16>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000750:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000754:	b2e4      	uxtb	r4, r4
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000756:	2c02      	cmp	r4, #2
 8000758:	d169      	bne.n	800082e <HAL_CAN_AddTxMessage+0xea>
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 800075a:	6804      	ldr	r4, [r0, #0]
 800075c:	68a5      	ldr	r5, [r4, #8]
 800075e:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 8000762:	d107      	bne.n	8000774 <HAL_CAN_AddTxMessage+0x30>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000764:	68a5      	ldr	r5, [r4, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000766:	f015 6f00 	tst.w	r5, #134217728	; 0x8000000
 800076a:	d103      	bne.n	8000774 <HAL_CAN_AddTxMessage+0x30>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 800076c:	68a5      	ldr	r5, [r4, #8]
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 800076e:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8000772:	d056      	beq.n	8000822 <HAL_CAN_AddTxMessage+0xde>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000774:	68a4      	ldr	r4, [r4, #8]
 8000776:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 800077a:	2501      	movs	r5, #1
 800077c:	40a5      	lsls	r5, r4
 800077e:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000780:	688b      	ldr	r3, [r1, #8]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d13a      	bne.n	80007fc <HAL_CAN_AddTxMessage+0xb8>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000786:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 8000788:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800078a:	6805      	ldr	r5, [r0, #0]
 800078c:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 8000790:	f104 0318 	add.w	r3, r4, #24
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	50ee      	str	r6, [r5, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000798:	6803      	ldr	r3, [r0, #0]
 800079a:	690d      	ldr	r5, [r1, #16]
 800079c:	f104 0618 	add.w	r6, r4, #24
 80007a0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80007a4:	605d      	str	r5, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80007a6:	7d0b      	ldrb	r3, [r1, #20]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d032      	beq.n	8000812 <HAL_CAN_AddTxMessage+0xce>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80007ac:	79d1      	ldrb	r1, [r2, #7]
 80007ae:	7993      	ldrb	r3, [r2, #6]
 80007b0:	041b      	lsls	r3, r3, #16
 80007b2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80007b6:	7951      	ldrb	r1, [r2, #5]
 80007b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80007bc:	7915      	ldrb	r5, [r2, #4]
 80007be:	6801      	ldr	r1, [r0, #0]
 80007c0:	432b      	orrs	r3, r5
 80007c2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80007c6:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80007ca:	78d1      	ldrb	r1, [r2, #3]
 80007cc:	7893      	ldrb	r3, [r2, #2]
 80007ce:	041b      	lsls	r3, r3, #16
 80007d0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80007d4:	7851      	ldrb	r1, [r2, #1]
 80007d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80007da:	7811      	ldrb	r1, [r2, #0]
 80007dc:	6802      	ldr	r2, [r0, #0]
 80007de:	430b      	orrs	r3, r1
 80007e0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80007e4:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80007e8:	6802      	ldr	r2, [r0, #0]
 80007ea:	3418      	adds	r4, #24
 80007ec:	0124      	lsls	r4, r4, #4
 80007ee:	5913      	ldr	r3, [r2, r4]
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	5113      	str	r3, [r2, r4]

      /* Return function status */
      return HAL_OK;
 80007f6:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80007f8:	bc70      	pop	{r4, r5, r6}
 80007fa:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80007fc:	684d      	ldr	r5, [r1, #4]
 80007fe:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
                                                           pHeader->RTR);
 8000802:	68cd      	ldr	r5, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000804:	6806      	ldr	r6, [r0, #0]
                                                           pHeader->IDE |
 8000806:	432b      	orrs	r3, r5
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000808:	f104 0518 	add.w	r5, r4, #24
 800080c:	012d      	lsls	r5, r5, #4
 800080e:	5173      	str	r3, [r6, r5]
 8000810:	e7c2      	b.n	8000798 <HAL_CAN_AddTxMessage+0x54>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000812:	6803      	ldr	r3, [r0, #0]
 8000814:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8000818:	6859      	ldr	r1, [r3, #4]
 800081a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800081e:	6059      	str	r1, [r3, #4]
 8000820:	e7c4      	b.n	80007ac <HAL_CAN_AddTxMessage+0x68>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000822:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000828:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 800082a:	2001      	movs	r0, #1
 800082c:	e7e4      	b.n	80007f8 <HAL_CAN_AddTxMessage+0xb4>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800082e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000834:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000836:	2001      	movs	r0, #1
 8000838:	e7de      	b.n	80007f8 <HAL_CAN_AddTxMessage+0xb4>

0800083a <HAL_CAN_GetTxMailboxesFreeLevel>:
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800083a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b01      	cmp	r3, #1
 8000842:	d006      	beq.n	8000852 <HAL_CAN_GetTxMailboxesFreeLevel+0x18>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000844:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000848:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800084a:	2b02      	cmp	r3, #2
 800084c:	d001      	beq.n	8000852 <HAL_CAN_GetTxMailboxesFreeLevel+0x18>
  uint32_t freelevel = 0U;
 800084e:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8000850:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != RESET)
 8000852:	6803      	ldr	r3, [r0, #0]
 8000854:	6898      	ldr	r0, [r3, #8]
 8000856:	f010 6080 	ands.w	r0, r0, #67108864	; 0x4000000
 800085a:	d000      	beq.n	800085e <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      freelevel++;
 800085c:	2001      	movs	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET)
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 8000864:	d000      	beq.n	8000868 <HAL_CAN_GetTxMailboxesFreeLevel+0x2e>
      freelevel++;
 8000866:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800086e:	d0ef      	beq.n	8000850 <HAL_CAN_GetTxMailboxesFreeLevel+0x16>
      freelevel++;
 8000870:	3001      	adds	r0, #1
 8000872:	4770      	bx	lr

08000874 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000874:	b430      	push	{r4, r5}
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000876:	f890 4020 	ldrb.w	r4, [r0, #32]
 800087a:	b2e4      	uxtb	r4, r4
 800087c:	2c01      	cmp	r4, #1
 800087e:	d005      	beq.n	800088c <HAL_CAN_GetRxMessage+0x18>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000880:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000884:	b2e4      	uxtb	r4, r4
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000886:	2c02      	cmp	r4, #2
 8000888:	f040 8092 	bne.w	80009b0 <HAL_CAN_GetRxMessage+0x13c>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800088c:	b951      	cbnz	r1, 80008a4 <HAL_CAN_GetRxMessage+0x30>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 800088e:	6804      	ldr	r4, [r0, #0]
 8000890:	68e4      	ldr	r4, [r4, #12]
 8000892:	f014 0f03 	tst.w	r4, #3
 8000896:	d112      	bne.n	80008be <HAL_CAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000898:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80008a0:	2001      	movs	r0, #1
 80008a2:	e073      	b.n	800098c <HAL_CAN_GetRxMessage+0x118>
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 80008a4:	2901      	cmp	r1, #1
 80008a6:	d10a      	bne.n	80008be <HAL_CAN_GetRxMessage+0x4a>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 80008a8:	6804      	ldr	r4, [r0, #0]
 80008aa:	6924      	ldr	r4, [r4, #16]
 80008ac:	f014 0f03 	tst.w	r4, #3
 80008b0:	d105      	bne.n	80008be <HAL_CAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80008b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b8:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80008ba:	2001      	movs	r0, #1
 80008bc:	e066      	b.n	800098c <HAL_CAN_GetRxMessage+0x118>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80008be:	6805      	ldr	r5, [r0, #0]
 80008c0:	f101 041b 	add.w	r4, r1, #27
 80008c4:	0124      	lsls	r4, r4, #4
 80008c6:	592c      	ldr	r4, [r5, r4]
 80008c8:	f004 0404 	and.w	r4, r4, #4
 80008cc:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d15e      	bne.n	8000990 <HAL_CAN_GetRxMessage+0x11c>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80008d2:	6805      	ldr	r5, [r0, #0]
 80008d4:	f101 041b 	add.w	r4, r1, #27
 80008d8:	0124      	lsls	r4, r4, #4
 80008da:	592c      	ldr	r4, [r5, r4]
 80008dc:	0d64      	lsrs	r4, r4, #21
 80008de:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80008e0:	6805      	ldr	r5, [r0, #0]
 80008e2:	f101 041b 	add.w	r4, r1, #27
 80008e6:	0124      	lsls	r4, r4, #4
 80008e8:	592d      	ldr	r5, [r5, r4]
 80008ea:	f3c5 0540 	ubfx	r5, r5, #1, #1
 80008ee:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008f0:	6805      	ldr	r5, [r0, #0]
 80008f2:	4425      	add	r5, r4
 80008f4:	686d      	ldr	r5, [r5, #4]
 80008f6:	f005 050f 	and.w	r5, r5, #15
 80008fa:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008fc:	6805      	ldr	r5, [r0, #0]
 80008fe:	4425      	add	r5, r4
 8000900:	686d      	ldr	r5, [r5, #4]
 8000902:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8000906:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000908:	6805      	ldr	r5, [r0, #0]
 800090a:	442c      	add	r4, r5
 800090c:	6864      	ldr	r4, [r4, #4]
 800090e:	0c24      	lsrs	r4, r4, #16
 8000910:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8000912:	6802      	ldr	r2, [r0, #0]
 8000914:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000918:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800091c:	701a      	strb	r2, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 800091e:	6802      	ldr	r2, [r0, #0]
 8000920:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000924:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000928:	0a12      	lsrs	r2, r2, #8
 800092a:	705a      	strb	r2, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 800092c:	6802      	ldr	r2, [r0, #0]
 800092e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000932:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000936:	0c12      	lsrs	r2, r2, #16
 8000938:	709a      	strb	r2, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 800093a:	6802      	ldr	r2, [r0, #0]
 800093c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000940:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000944:	0e12      	lsrs	r2, r2, #24
 8000946:	70da      	strb	r2, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8000948:	6802      	ldr	r2, [r0, #0]
 800094a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800094e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000952:	711a      	strb	r2, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8000954:	6802      	ldr	r2, [r0, #0]
 8000956:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800095a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800095e:	0a12      	lsrs	r2, r2, #8
 8000960:	715a      	strb	r2, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8000962:	6802      	ldr	r2, [r0, #0]
 8000964:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000968:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800096c:	0c12      	lsrs	r2, r2, #16
 800096e:	719a      	strb	r2, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8000970:	6802      	ldr	r2, [r0, #0]
 8000972:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000976:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800097e:	b979      	cbnz	r1, 80009a0 <HAL_CAN_GetRxMessage+0x12c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000980:	6802      	ldr	r2, [r0, #0]
 8000982:	68d3      	ldr	r3, [r2, #12]
 8000984:	f043 0320 	orr.w	r3, r3, #32
 8000988:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 800098a:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800098c:	bc30      	pop	{r4, r5}
 800098e:	4770      	bx	lr
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000990:	6805      	ldr	r5, [r0, #0]
 8000992:	f101 041b 	add.w	r4, r1, #27
 8000996:	0124      	lsls	r4, r4, #4
 8000998:	592c      	ldr	r4, [r5, r4]
 800099a:	08e4      	lsrs	r4, r4, #3
 800099c:	6054      	str	r4, [r2, #4]
 800099e:	e79f      	b.n	80008e0 <HAL_CAN_GetRxMessage+0x6c>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 80009a0:	2901      	cmp	r1, #1
 80009a2:	d1f2      	bne.n	800098a <HAL_CAN_GetRxMessage+0x116>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80009a4:	6802      	ldr	r2, [r0, #0]
 80009a6:	6913      	ldr	r3, [r2, #16]
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	6113      	str	r3, [r2, #16]
 80009ae:	e7ec      	b.n	800098a <HAL_CAN_GetRxMessage+0x116>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b6:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80009b8:	2001      	movs	r0, #1
 80009ba:	e7e7      	b.n	800098c <HAL_CAN_GetRxMessage+0x118>

080009bc <HAL_CAN_ActivateNotification>:
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80009bc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d00a      	beq.n	80009dc <HAL_CAN_ActivateNotification+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80009c6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80009ca:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d005      	beq.n	80009dc <HAL_CAN_ActivateNotification+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d6:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80009d8:	2001      	movs	r0, #1
  }
}
 80009da:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80009dc:	6802      	ldr	r2, [r0, #0]
 80009de:	6953      	ldr	r3, [r2, #20]
 80009e0:	4319      	orrs	r1, r3
 80009e2:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80009e4:	2000      	movs	r0, #0
 80009e6:	4770      	bx	lr

080009e8 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80009e8:	4770      	bx	lr

080009ea <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80009ea:	4770      	bx	lr

080009ec <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80009ec:	4770      	bx	lr

080009ee <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80009ee:	4770      	bx	lr

080009f0 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80009f0:	4770      	bx	lr

080009f2 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80009f2:	4770      	bx	lr

080009f4 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80009f4:	4770      	bx	lr

080009f6 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80009f6:	4770      	bx	lr

080009f8 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80009f8:	4770      	bx	lr

080009fa <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80009fa:	4770      	bx	lr

080009fc <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80009fc:	4770      	bx	lr

080009fe <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80009fe:	4770      	bx	lr

08000a00 <HAL_CAN_IRQHandler>:
{
 8000a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a04:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000a06:	6803      	ldr	r3, [r0, #0]
 8000a08:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000a0a:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000a0e:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000a10:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000a14:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000a18:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 8000a1c:	f014 0601 	ands.w	r6, r4, #1
 8000a20:	d03b      	beq.n	8000a9a <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 8000a22:	f017 0601 	ands.w	r6, r7, #1
 8000a26:	d016      	beq.n	8000a56 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 8000a2c:	f017 0f02 	tst.w	r7, #2
 8000a30:	d108      	bne.n	8000a44 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 8000a32:	f017 0f04 	tst.w	r7, #4
 8000a36:	d10c      	bne.n	8000a52 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 8000a38:	f017 0608 	ands.w	r6, r7, #8
 8000a3c:	d006      	beq.n	8000a4c <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000a3e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000a42:	e008      	b.n	8000a56 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000a44:	f7ff ffd0 	bl	80009e8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000a48:	2600      	movs	r6, #0
 8000a4a:	e004      	b.n	8000a56 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000a4c:	f7ff ffcf 	bl	80009ee <HAL_CAN_TxMailbox0AbortCallback>
 8000a50:	e001      	b.n	8000a56 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000a52:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 8000a56:	f417 7f80 	tst.w	r7, #256	; 0x100
 8000a5a:	d00d      	beq.n	8000a78 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a62:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 8000a64:	f417 7f00 	tst.w	r7, #512	; 0x200
 8000a68:	f040 8086 	bne.w	8000b78 <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 8000a6c:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8000a70:	f000 8086 	beq.w	8000b80 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000a74:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 8000a78:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000a7c:	d00d      	beq.n	8000a9a <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a84:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 8000a86:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000a8a:	f040 8083 	bne.w	8000b94 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 8000a8e:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8000a92:	f000 8083 	beq.w	8000b9c <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a96:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 8000a9a:	f014 0f08 	tst.w	r4, #8
 8000a9e:	d007      	beq.n	8000ab0 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 8000aa0:	f01b 0f10 	tst.w	fp, #16
 8000aa4:	d004      	beq.n	8000ab0 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000aa6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000aaa:	682b      	ldr	r3, [r5, #0]
 8000aac:	2210      	movs	r2, #16
 8000aae:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 8000ab0:	f014 0f04 	tst.w	r4, #4
 8000ab4:	d002      	beq.n	8000abc <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 8000ab6:	f01b 0f08 	tst.w	fp, #8
 8000aba:	d179      	bne.n	8000bb0 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 8000abc:	f014 0f02 	tst.w	r4, #2
 8000ac0:	d004      	beq.n	8000acc <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 8000ac2:	682b      	ldr	r3, [r5, #0]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	f013 0f03 	tst.w	r3, #3
 8000aca:	d178      	bne.n	8000bbe <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 8000acc:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000ad0:	d007      	beq.n	8000ae2 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 8000ad2:	f01a 0f10 	tst.w	sl, #16
 8000ad6:	d004      	beq.n	8000ae2 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000ad8:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	2210      	movs	r2, #16
 8000ae0:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 8000ae2:	f014 0f20 	tst.w	r4, #32
 8000ae6:	d002      	beq.n	8000aee <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 8000ae8:	f01a 0f08 	tst.w	sl, #8
 8000aec:	d16b      	bne.n	8000bc6 <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 8000aee:	f014 0f10 	tst.w	r4, #16
 8000af2:	d004      	beq.n	8000afe <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 8000af4:	682b      	ldr	r3, [r5, #0]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	f013 0f03 	tst.w	r3, #3
 8000afc:	d16a      	bne.n	8000bd4 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 8000afe:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000b02:	d002      	beq.n	8000b0a <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 8000b04:	f018 0f10 	tst.w	r8, #16
 8000b08:	d168      	bne.n	8000bdc <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 8000b0a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000b0e:	d002      	beq.n	8000b16 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 8000b10:	f018 0f08 	tst.w	r8, #8
 8000b14:	d169      	bne.n	8000bea <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != RESET)
 8000b16:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000b1a:	d07a      	beq.n	8000c12 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 8000b1c:	f018 0f04 	tst.w	r8, #4
 8000b20:	d074      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8000b22:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000b26:	d004      	beq.n	8000b32 <HAL_CAN_IRQHandler+0x132>
 8000b28:	f019 0f01 	tst.w	r9, #1
 8000b2c:	d001      	beq.n	8000b32 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b2e:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8000b32:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000b36:	d004      	beq.n	8000b42 <HAL_CAN_IRQHandler+0x142>
 8000b38:	f019 0f02 	tst.w	r9, #2
 8000b3c:	d001      	beq.n	8000b42 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8000b3e:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8000b42:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8000b46:	d004      	beq.n	8000b52 <HAL_CAN_IRQHandler+0x152>
 8000b48:	f019 0f04 	tst.w	r9, #4
 8000b4c:	d001      	beq.n	8000b52 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8000b4e:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 8000b52:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8000b56:	d059      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x20c>
 8000b58:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8000b5c:	d056      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 8000b5e:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8000b62:	d065      	beq.n	8000c30 <HAL_CAN_IRQHandler+0x230>
 8000b64:	d858      	bhi.n	8000c18 <HAL_CAN_IRQHandler+0x218>
 8000b66:	f1b9 0f20 	cmp.w	r9, #32
 8000b6a:	d05e      	beq.n	8000c2a <HAL_CAN_IRQHandler+0x22a>
 8000b6c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8000b70:	d142      	bne.n	8000bf8 <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b72:	f046 0620 	orr.w	r6, r6, #32
            break;
 8000b76:	e044      	b.n	8000c02 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f7ff ff36 	bl	80009ea <HAL_CAN_TxMailbox1CompleteCallback>
 8000b7e:	e77b      	b.n	8000a78 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 8000b80:	f417 6f00 	tst.w	r7, #2048	; 0x800
 8000b84:	d002      	beq.n	8000b8c <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b86:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b8a:	e775      	b.n	8000a78 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b8c:	4628      	mov	r0, r5
 8000b8e:	f7ff ff2f 	bl	80009f0 <HAL_CAN_TxMailbox1AbortCallback>
 8000b92:	e771      	b.n	8000a78 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b94:	4628      	mov	r0, r5
 8000b96:	f7ff ff29 	bl	80009ec <HAL_CAN_TxMailbox2CompleteCallback>
 8000b9a:	e77e      	b.n	8000a9a <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 8000b9c:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8000ba0:	d002      	beq.n	8000ba8 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ba2:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8000ba6:	e778      	b.n	8000a9a <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f7ff ff22 	bl	80009f2 <HAL_CAN_TxMailbox2AbortCallback>
 8000bae:	e774      	b.n	8000a9a <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f7ff ff1c 	bl	80009f4 <HAL_CAN_RxFifo0FullCallback>
 8000bbc:	e77e      	b.n	8000abc <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	f001 fcec 	bl	800259c <HAL_CAN_RxFifo0MsgPendingCallback>
 8000bc4:	e782      	b.n	8000acc <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	2208      	movs	r2, #8
 8000bca:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000bcc:	4628      	mov	r0, r5
 8000bce:	f7ff ff13 	bl	80009f8 <HAL_CAN_RxFifo1FullCallback>
 8000bd2:	e78c      	b.n	8000aee <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f7ff ff0e 	bl	80009f6 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000bda:	e790      	b.n	8000afe <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	2210      	movs	r2, #16
 8000be0:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000be2:	4628      	mov	r0, r5
 8000be4:	f7ff ff09 	bl	80009fa <HAL_CAN_SleepCallback>
 8000be8:	e78f      	b.n	8000b0a <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000bea:	682b      	ldr	r3, [r5, #0]
 8000bec:	2208      	movs	r2, #8
 8000bee:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	f7ff ff03 	bl	80009fc <HAL_CAN_WakeUpFromRxMsgCallback>
 8000bf6:	e78e      	b.n	8000b16 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8000bf8:	f1b9 0f10 	cmp.w	r9, #16
 8000bfc:	d101      	bne.n	8000c02 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 8000bfe:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c02:	682a      	ldr	r2, [r5, #0]
 8000c04:	6993      	ldr	r3, [r2, #24]
 8000c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c0a:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c0c:	682b      	ldr	r3, [r5, #0]
 8000c0e:	2204      	movs	r2, #4
 8000c10:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c12:	b99e      	cbnz	r6, 8000c3c <HAL_CAN_IRQHandler+0x23c>
}
 8000c14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8000c18:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8000c1c:	d00b      	beq.n	8000c36 <HAL_CAN_IRQHandler+0x236>
 8000c1e:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 8000c22:	d1ee      	bne.n	8000c02 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000c24:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8000c28:	e7eb      	b.n	8000c02 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000c2a:	f046 0610 	orr.w	r6, r6, #16
            break;
 8000c2e:	e7e8      	b.n	8000c02 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8000c30:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8000c34:	e7e5      	b.n	8000c02 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 8000c36:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8000c3a:	e7e2      	b.n	8000c02 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8000c3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c3e:	431e      	orrs	r6, r3
 8000c40:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000c42:	4628      	mov	r0, r5
 8000c44:	f7ff fedb 	bl	80009fe <HAL_CAN_ErrorCallback>
}
 8000c48:	e7e4      	b.n	8000c14 <HAL_CAN_IRQHandler+0x214>
	...

08000c4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c54:	041b      	lsls	r3, r3, #16
 8000c56:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c58:	0200      	lsls	r0, r0, #8
 8000c5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c68:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c70:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_NVIC_SetPriority+0x60>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7a:	f1c3 0407 	rsb	r4, r3, #7
 8000c7e:	2c04      	cmp	r4, #4
 8000c80:	bf28      	it	cs
 8000c82:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c84:	1d1d      	adds	r5, r3, #4
 8000c86:	2d06      	cmp	r5, #6
 8000c88:	d918      	bls.n	8000cbc <HAL_NVIC_SetPriority+0x4c>
 8000c8a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 35ff 	mov.w	r5, #4294967295
 8000c90:	fa05 f404 	lsl.w	r4, r5, r4
 8000c94:	ea21 0104 	bic.w	r1, r1, r4
 8000c98:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9a:	fa05 f303 	lsl.w	r3, r5, r3
 8000c9e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	db0b      	blt.n	8000cc0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	0109      	lsls	r1, r1, #4
 8000caa:	b2c9      	uxtb	r1, r1
 8000cac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000cb0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000cb4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000cb8:	bc30      	pop	{r4, r5}
 8000cba:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e7e5      	b.n	8000c8c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	f000 000f 	and.w	r0, r0, #15
 8000cc4:	0109      	lsls	r1, r1, #4
 8000cc6:	b2c9      	uxtb	r1, r1
 8000cc8:	4b02      	ldr	r3, [pc, #8]	; (8000cd4 <HAL_NVIC_SetPriority+0x64>)
 8000cca:	5419      	strb	r1, [r3, r0]
 8000ccc:	e7f4      	b.n	8000cb8 <HAL_NVIC_SetPriority+0x48>
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	e000ed14 	.word	0xe000ed14

08000cd8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cd8:	f000 021f 	and.w	r2, r0, #31
 8000cdc:	0940      	lsrs	r0, r0, #5
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4093      	lsls	r3, r2
 8000ce2:	4a02      	ldr	r2, [pc, #8]	; (8000cec <HAL_NVIC_EnableIRQ+0x14>)
 8000ce4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cf6:	d20a      	bcs.n	8000d0e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_SYSTICK_Config+0x24>)
 8000cfa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_SYSTICK_Config+0x28>)
 8000cfe:	21f0      	movs	r1, #240	; 0xf0
 8000d00:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	2000      	movs	r0, #0
 8000d06:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d1c:	2804      	cmp	r0, #4
 8000d1e:	d005      	beq.n	8000d2c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d20:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000d22:	6813      	ldr	r3, [r2, #0]
 8000d24:	f023 0304 	bic.w	r3, r3, #4
 8000d28:	6013      	str	r3, [r2, #0]
  }
}
 8000d2a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d2c:	4a02      	ldr	r2, [pc, #8]	; (8000d38 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4770      	bx	lr
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d3c:	4770      	bx	lr

08000d3e <HAL_SYSTICK_IRQHandler>:
{
 8000d3e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000d40:	f7ff fffc 	bl	8000d3c <HAL_SYSTICK_Callback>
}
 8000d44:	bd08      	pop	{r3, pc}
	...

08000d48 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2b0f      	cmp	r3, #15
 8000d4c:	f200 80d3 	bhi.w	8000ef6 <HAL_GPIO_Init+0x1ae>
{
 8000d50:	b4f0      	push	{r4, r5, r6, r7}
 8000d52:	b082      	sub	sp, #8
 8000d54:	e039      	b.n	8000dca <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d56:	2206      	movs	r2, #6
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x14>
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	40b2      	lsls	r2, r6
 8000d5e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d60:	3402      	adds	r4, #2
 8000d62:	4e65      	ldr	r6, [pc, #404]	; (8000ef8 <HAL_GPIO_Init+0x1b0>)
 8000d64:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d68:	4a64      	ldr	r2, [pc, #400]	; (8000efc <HAL_GPIO_Init+0x1b4>)
 8000d6a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d6c:	43ea      	mvns	r2, r5
 8000d6e:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d72:	684f      	ldr	r7, [r1, #4]
 8000d74:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000d78:	d001      	beq.n	8000d7e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000d7a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000d7e:	4c5f      	ldr	r4, [pc, #380]	; (8000efc <HAL_GPIO_Init+0x1b4>)
 8000d80:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000d82:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d84:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d88:	684f      	ldr	r7, [r1, #4]
 8000d8a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000d8e:	d001      	beq.n	8000d94 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000d90:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000d94:	4c59      	ldr	r4, [pc, #356]	; (8000efc <HAL_GPIO_Init+0x1b4>)
 8000d96:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d98:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9e:	684f      	ldr	r7, [r1, #4]
 8000da0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000da4:	d001      	beq.n	8000daa <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000da6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000daa:	4c54      	ldr	r4, [pc, #336]	; (8000efc <HAL_GPIO_Init+0x1b4>)
 8000dac:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000dae:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db2:	684e      	ldr	r6, [r1, #4]
 8000db4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000db8:	d001      	beq.n	8000dbe <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000dba:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000dbe:	4c4f      	ldr	r4, [pc, #316]	; (8000efc <HAL_GPIO_Init+0x1b4>)
 8000dc0:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	f200 8093 	bhi.w	8000ef0 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	680c      	ldr	r4, [r1, #0]
 8000dd0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000dd4:	ea32 0404 	bics.w	r4, r2, r4
 8000dd8:	d1f3      	bne.n	8000dc2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dda:	684c      	ldr	r4, [r1, #4]
 8000ddc:	2c02      	cmp	r4, #2
 8000dde:	d001      	beq.n	8000de4 <HAL_GPIO_Init+0x9c>
 8000de0:	2c12      	cmp	r4, #18
 8000de2:	d110      	bne.n	8000e06 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3U];
 8000de4:	08de      	lsrs	r6, r3, #3
 8000de6:	3608      	adds	r6, #8
 8000de8:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dec:	f003 0407 	and.w	r4, r3, #7
 8000df0:	00a7      	lsls	r7, r4, #2
 8000df2:	240f      	movs	r4, #15
 8000df4:	40bc      	lsls	r4, r7
 8000df6:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dfa:	690c      	ldr	r4, [r1, #16]
 8000dfc:	40bc      	lsls	r4, r7
 8000dfe:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e02:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000e06:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	005e      	lsls	r6, r3, #1
 8000e0c:	2403      	movs	r4, #3
 8000e0e:	40b4      	lsls	r4, r6
 8000e10:	43e7      	mvns	r7, r4
 8000e12:	ea2c 0c04 	bic.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e16:	684c      	ldr	r4, [r1, #4]
 8000e18:	f004 0403 	and.w	r4, r4, #3
 8000e1c:	40b4      	lsls	r4, r6
 8000e1e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000e22:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e24:	684c      	ldr	r4, [r1, #4]
 8000e26:	f104 3cff 	add.w	ip, r4, #4294967295
 8000e2a:	f1bc 0f01 	cmp.w	ip, #1
 8000e2e:	d903      	bls.n	8000e38 <HAL_GPIO_Init+0xf0>
 8000e30:	2c11      	cmp	r4, #17
 8000e32:	d001      	beq.n	8000e38 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e34:	2c12      	cmp	r4, #18
 8000e36:	d110      	bne.n	8000e5a <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8000e38:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e3a:	ea07 0c04 	and.w	ip, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3e:	68cc      	ldr	r4, [r1, #12]
 8000e40:	40b4      	lsls	r4, r6
 8000e42:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000e46:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e48:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4a:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e4e:	684c      	ldr	r4, [r1, #4]
 8000e50:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000e54:	409c      	lsls	r4, r3
 8000e56:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000e58:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e5a:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5c:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5e:	688a      	ldr	r2, [r1, #8]
 8000e60:	40b2      	lsls	r2, r6
 8000e62:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8000e64:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e66:	684a      	ldr	r2, [r1, #4]
 8000e68:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000e6c:	d0a9      	beq.n	8000dc2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	2200      	movs	r2, #0
 8000e70:	9201      	str	r2, [sp, #4]
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_GPIO_Init+0x1b8>)
 8000e74:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000e76:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000e7a:	6454      	str	r4, [r2, #68]	; 0x44
 8000e7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e7e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e82:	9201      	str	r2, [sp, #4]
 8000e84:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e86:	089c      	lsrs	r4, r3, #2
 8000e88:	1ca6      	adds	r6, r4, #2
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <HAL_GPIO_Init+0x1b0>)
 8000e8c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	0096      	lsls	r6, r2, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	40b2      	lsls	r2, r6
 8000e9a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_GPIO_Init+0x1bc>)
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f43f af5a 	beq.w	8000d5a <HAL_GPIO_Init+0x12>
 8000ea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eaa:	4290      	cmp	r0, r2
 8000eac:	d016      	beq.n	8000edc <HAL_GPIO_Init+0x194>
 8000eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb2:	4290      	cmp	r0, r2
 8000eb4:	d014      	beq.n	8000ee0 <HAL_GPIO_Init+0x198>
 8000eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	d012      	beq.n	8000ee4 <HAL_GPIO_Init+0x19c>
 8000ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec2:	4290      	cmp	r0, r2
 8000ec4:	d010      	beq.n	8000ee8 <HAL_GPIO_Init+0x1a0>
 8000ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d00e      	beq.n	8000eec <HAL_GPIO_Init+0x1a4>
 8000ece:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	f43f af3f 	beq.w	8000d56 <HAL_GPIO_Init+0xe>
 8000ed8:	2207      	movs	r2, #7
 8000eda:	e73f      	b.n	8000d5c <HAL_GPIO_Init+0x14>
 8000edc:	2201      	movs	r2, #1
 8000ede:	e73d      	b.n	8000d5c <HAL_GPIO_Init+0x14>
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	e73b      	b.n	8000d5c <HAL_GPIO_Init+0x14>
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	e739      	b.n	8000d5c <HAL_GPIO_Init+0x14>
 8000ee8:	2204      	movs	r2, #4
 8000eea:	e737      	b.n	8000d5c <HAL_GPIO_Init+0x14>
 8000eec:	2205      	movs	r2, #5
 8000eee:	e735      	b.n	8000d5c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	4770      	bx	lr
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40013c00 	.word	0x40013c00
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f08:	b10a      	cbz	r2, 8000f0e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0a:	6181      	str	r1, [r0, #24]
 8000f0c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	6181      	str	r1, [r0, #24]
  }
}
 8000f12:	4770      	bx	lr

08000f14 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000f14:	6943      	ldr	r3, [r0, #20]
 8000f16:	4059      	eors	r1, r3
 8000f18:	6141      	str	r1, [r0, #20]
}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	f000 809a 	beq.w	8001056 <HAL_RCC_ClockConfig+0x13a>
{
 8000f22:	b570      	push	{r4, r5, r6, lr}
 8000f24:	460d      	mov	r5, r1
 8000f26:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f28:	4b4f      	ldr	r3, [pc, #316]	; (8001068 <HAL_RCC_ClockConfig+0x14c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d208      	bcs.n	8000f46 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f34:	b2cb      	uxtb	r3, r1
 8000f36:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HAL_RCC_ClockConfig+0x14c>)
 8000f38:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	428b      	cmp	r3, r1
 8000f42:	f040 808a 	bne.w	800105a <HAL_RCC_ClockConfig+0x13e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	f013 0f02 	tst.w	r3, #2
 8000f4c:	d017      	beq.n	8000f7e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f4e:	f013 0f04 	tst.w	r3, #4
 8000f52:	d004      	beq.n	8000f5e <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f54:	4a45      	ldr	r2, [pc, #276]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8000f56:	6893      	ldr	r3, [r2, #8]
 8000f58:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f5c:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	f013 0f08 	tst.w	r3, #8
 8000f64:	d004      	beq.n	8000f70 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f66:	4a41      	ldr	r2, [pc, #260]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8000f68:	6893      	ldr	r3, [r2, #8]
 8000f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f70:	4a3e      	ldr	r2, [pc, #248]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8000f72:	6893      	ldr	r3, [r2, #8]
 8000f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f78:	68a1      	ldr	r1, [r4, #8]
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	f013 0f01 	tst.w	r3, #1
 8000f84:	d032      	beq.n	8000fec <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f86:	6863      	ldr	r3, [r4, #4]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d021      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f8c:	1e9a      	subs	r2, r3, #2
 8000f8e:	2a01      	cmp	r2, #1
 8000f90:	d925      	bls.n	8000fde <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f92:	4a36      	ldr	r2, [pc, #216]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	f012 0f02 	tst.w	r2, #2
 8000f9a:	d060      	beq.n	800105e <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f9c:	4933      	ldr	r1, [pc, #204]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8000f9e:	688a      	ldr	r2, [r1, #8]
 8000fa0:	f022 0203 	bic.w	r2, r2, #3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fa8:	f7ff faf2 	bl	8000590 <HAL_GetTick>
 8000fac:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	6862      	ldr	r2, [r4, #4]
 8000fb8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fbc:	d016      	beq.n	8000fec <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fbe:	f7ff fae7 	bl	8000590 <HAL_GetTick>
 8000fc2:	1b80      	subs	r0, r0, r6
 8000fc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fc8:	4298      	cmp	r0, r3
 8000fca:	d9f0      	bls.n	8000fae <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8000fcc:	2003      	movs	r0, #3
 8000fce:	e041      	b.n	8001054 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd0:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000fd8:	d1e0      	bne.n	8000f9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fda:	2001      	movs	r0, #1
 8000fdc:	e03a      	b.n	8001054 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000fe6:	d1d9      	bne.n	8000f9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
 8000fea:	e033      	b.n	8001054 <HAL_RCC_ClockConfig+0x138>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <HAL_RCC_ClockConfig+0x14c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	42ab      	cmp	r3, r5
 8000ff6:	d907      	bls.n	8001008 <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff8:	b2ea      	uxtb	r2, r5
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_RCC_ClockConfig+0x14c>)
 8000ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	42ab      	cmp	r3, r5
 8001006:	d12c      	bne.n	8001062 <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	f013 0f04 	tst.w	r3, #4
 800100e:	d006      	beq.n	800101e <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8001012:	6893      	ldr	r3, [r2, #8]
 8001014:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001018:	68e1      	ldr	r1, [r4, #12]
 800101a:	430b      	orrs	r3, r1
 800101c:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	f013 0f08 	tst.w	r3, #8
 8001024:	d007      	beq.n	8001036 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 8001028:	6893      	ldr	r3, [r2, #8]
 800102a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800102e:	6921      	ldr	r1, [r4, #16]
 8001030:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001034:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001036:	f000 f825 	bl	8001084 <HAL_RCC_GetSysClockFreq>
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_RCC_ClockConfig+0x150>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <HAL_RCC_ClockConfig+0x154>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	40d8      	lsrs	r0, r3
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_RCC_ClockConfig+0x158>)
 800104a:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fa55 	bl	80004fc <HAL_InitTick>

  return HAL_OK;
 8001052:	2000      	movs	r0, #0
}
 8001054:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001056:	2001      	movs	r0, #1
}
 8001058:	4770      	bx	lr
      return HAL_ERROR;
 800105a:	2001      	movs	r0, #1
 800105c:	e7fa      	b.n	8001054 <HAL_RCC_ClockConfig+0x138>
        return HAL_ERROR;
 800105e:	2001      	movs	r0, #1
 8001060:	e7f8      	b.n	8001054 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001062:	2001      	movs	r0, #1
 8001064:	e7f6      	b.n	8001054 <HAL_RCC_ClockConfig+0x138>
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00
 800106c:	40023800 	.word	0x40023800
 8001070:	08003710 	.word	0x08003710
 8001074:	200000bc 	.word	0x200000bc

08001078 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001078:	4b01      	ldr	r3, [pc, #4]	; (8001080 <HAL_RCC_GetHCLKFreq+0x8>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200000bc 	.word	0x200000bc

08001084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001086:	4b42      	ldr	r3, [pc, #264]	; (8001190 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b08      	cmp	r3, #8
 8001090:	d007      	beq.n	80010a2 <HAL_RCC_GetSysClockFreq+0x1e>
 8001092:	2b0c      	cmp	r3, #12
 8001094:	d041      	beq.n	800111a <HAL_RCC_GetSysClockFreq+0x96>
 8001096:	2b04      	cmp	r3, #4
 8001098:	d001      	beq.n	800109e <HAL_RCC_GetSysClockFreq+0x1a>
 800109a:	483e      	ldr	r0, [pc, #248]	; (8001194 <HAL_RCC_GetSysClockFreq+0x110>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sysclockfreq = HSE_VALUE;
 800109e:	483e      	ldr	r0, [pc, #248]	; (8001198 <HAL_RCC_GetSysClockFreq+0x114>)
 80010a0:	e7fc      	b.n	800109c <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010a2:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <HAL_RCC_GetSysClockFreq+0x10c>)
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80010b0:	d012      	beq.n	80010d8 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <HAL_RCC_GetSysClockFreq+0x10c>)
 80010b4:	6859      	ldr	r1, [r3, #4]
 80010b6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80010ba:	2300      	movs	r3, #0
 80010bc:	4836      	ldr	r0, [pc, #216]	; (8001198 <HAL_RCC_GetSysClockFreq+0x114>)
 80010be:	fba1 0100 	umull	r0, r1, r1, r0
 80010c2:	f7ff f89f 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_RCC_GetSysClockFreq+0x10c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80010ce:	3301      	adds	r3, #1
 80010d0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80010d2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80010d6:	e7e1      	b.n	800109c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_RCC_GetSysClockFreq+0x10c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80010e0:	0158      	lsls	r0, r3, #5
 80010e2:	2100      	movs	r1, #0
 80010e4:	1ac0      	subs	r0, r0, r3
 80010e6:	f161 0100 	sbc.w	r1, r1, #0
 80010ea:	018e      	lsls	r6, r1, #6
 80010ec:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 80010f0:	0187      	lsls	r7, r0, #6
 80010f2:	1a3c      	subs	r4, r7, r0
 80010f4:	eb66 0501 	sbc.w	r5, r6, r1
 80010f8:	00e9      	lsls	r1, r5, #3
 80010fa:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 80010fe:	00e0      	lsls	r0, r4, #3
 8001100:	18c0      	adds	r0, r0, r3
 8001102:	f141 0100 	adc.w	r1, r1, #0
 8001106:	028b      	lsls	r3, r1, #10
 8001108:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800110c:	0284      	lsls	r4, r0, #10
 800110e:	4620      	mov	r0, r4
 8001110:	4619      	mov	r1, r3
 8001112:	2300      	movs	r3, #0
 8001114:	f7ff f876 	bl	8000204 <__aeabi_uldivmod>
 8001118:	e7d5      	b.n	80010c6 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_RCC_GetSysClockFreq+0x10c>)
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001128:	d010      	beq.n	800114c <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_RCC_GetSysClockFreq+0x10c>)
 800112c:	6859      	ldr	r1, [r3, #4]
 800112e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001132:	2300      	movs	r3, #0
 8001134:	4818      	ldr	r0, [pc, #96]	; (8001198 <HAL_RCC_GetSysClockFreq+0x114>)
 8001136:	fba1 0100 	umull	r0, r1, r1, r0
 800113a:	f7ff f863 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8001146:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800114a:	e7a7      	b.n	800109c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_RCC_GetSysClockFreq+0x10c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001154:	015c      	lsls	r4, r3, #5
 8001156:	2500      	movs	r5, #0
 8001158:	1ae4      	subs	r4, r4, r3
 800115a:	f165 0500 	sbc.w	r5, r5, #0
 800115e:	01ae      	lsls	r6, r5, #6
 8001160:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001164:	01a7      	lsls	r7, r4, #6
 8001166:	1b38      	subs	r0, r7, r4
 8001168:	eb66 0105 	sbc.w	r1, r6, r5
 800116c:	00cc      	lsls	r4, r1, #3
 800116e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001172:	00c5      	lsls	r5, r0, #3
 8001174:	18e8      	adds	r0, r5, r3
 8001176:	f144 0100 	adc.w	r1, r4, #0
 800117a:	028b      	lsls	r3, r1, #10
 800117c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001180:	0284      	lsls	r4, r0, #10
 8001182:	4620      	mov	r0, r4
 8001184:	4619      	mov	r1, r3
 8001186:	2300      	movs	r3, #0
 8001188:	f7ff f83c 	bl	8000204 <__aeabi_uldivmod>
 800118c:	e7d7      	b.n	800113e <HAL_RCC_GetSysClockFreq+0xba>
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	00f42400 	.word	0x00f42400
 8001198:	017d7840 	.word	0x017d7840

0800119c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	6803      	ldr	r3, [r0, #0]
 80011a4:	f013 0f01 	tst.w	r3, #1
 80011a8:	d041      	beq.n	800122e <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011aa:	4ba6      	ldr	r3, [pc, #664]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d032      	beq.n	800121c <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011b6:	4ba3      	ldr	r3, [pc, #652]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d027      	beq.n	8001212 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4ba0      	ldr	r3, [pc, #640]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	d059      	beq.n	8001282 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ce:	6863      	ldr	r3, [r4, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d05b      	beq.n	800128e <HAL_RCC_OscConfig+0xf2>
 80011d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011da:	d05e      	beq.n	800129a <HAL_RCC_OscConfig+0xfe>
 80011dc:	4b99      	ldr	r3, [pc, #612]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ee:	6863      	ldr	r3, [r4, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d05c      	beq.n	80012ae <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff f9cc 	bl	8000590 <HAL_GetTick>
 80011f8:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b92      	ldr	r3, [pc, #584]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001202:	d114      	bne.n	800122e <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff f9c4 	bl	8000590 <HAL_GetTick>
 8001208:	1b40      	subs	r0, r0, r5
 800120a:	2864      	cmp	r0, #100	; 0x64
 800120c:	d9f5      	bls.n	80011fa <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800120e:	2003      	movs	r0, #3
 8001210:	e19f      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001212:	4b8c      	ldr	r3, [pc, #560]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800121a:	d0d2      	beq.n	80011c2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b89      	ldr	r3, [pc, #548]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001224:	d003      	beq.n	800122e <HAL_RCC_OscConfig+0x92>
 8001226:	6863      	ldr	r3, [r4, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 818d 	beq.w	8001548 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	f013 0f02 	tst.w	r3, #2
 8001234:	d060      	beq.n	80012f8 <HAL_RCC_OscConfig+0x15c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001236:	4b83      	ldr	r3, [pc, #524]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f013 0f0c 	tst.w	r3, #12
 800123e:	d04a      	beq.n	80012d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001240:	4b80      	ldr	r3, [pc, #512]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001248:	2b08      	cmp	r3, #8
 800124a:	d03f      	beq.n	80012cc <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124c:	4b7d      	ldr	r3, [pc, #500]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001254:	2b0c      	cmp	r3, #12
 8001256:	d068      	beq.n	800132a <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001258:	68e3      	ldr	r3, [r4, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d074      	beq.n	8001348 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125e:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff f994 	bl	8000590 <HAL_GetTick>
 8001268:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f013 0f02 	tst.w	r3, #2
 8001272:	d160      	bne.n	8001336 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff f98c 	bl	8000590 <HAL_GetTick>
 8001278:	1b40      	subs	r0, r0, r5
 800127a:	2802      	cmp	r0, #2
 800127c:	d9f5      	bls.n	800126a <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800127e:	2003      	movs	r0, #3
 8001280:	e167      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b70      	ldr	r3, [pc, #448]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800128a:	d0a0      	beq.n	80011ce <HAL_RCC_OscConfig+0x32>
 800128c:	e7c6      	b.n	800121c <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128e:	4a6d      	ldr	r2, [pc, #436]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 8001290:	6813      	ldr	r3, [r2, #0]
 8001292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e7a9      	b.n	80011ee <HAL_RCC_OscConfig+0x52>
 800129a:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e79f      	b.n	80011ee <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 80012ae:	f7ff f96f 	bl	8000590 <HAL_GetTick>
 80012b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b4:	4b63      	ldr	r3, [pc, #396]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012bc:	d0b7      	beq.n	800122e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012be:	f7ff f967 	bl	8000590 <HAL_GetTick>
 80012c2:	1b40      	subs	r0, r0, r5
 80012c4:	2864      	cmp	r0, #100	; 0x64
 80012c6:	d9f5      	bls.n	80012b4 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80012c8:	2003      	movs	r0, #3
 80012ca:	e142      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012cc:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012d4:	d1ba      	bne.n	800124c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f013 0f02 	tst.w	r3, #2
 80012de:	d003      	beq.n	80012e8 <HAL_RCC_OscConfig+0x14c>
 80012e0:	68e3      	ldr	r3, [r4, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	f040 8132 	bne.w	800154c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4a56      	ldr	r2, [pc, #344]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012f0:	6921      	ldr	r1, [r4, #16]
 80012f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012f6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	f013 0f08 	tst.w	r3, #8
 80012fe:	d047      	beq.n	8001390 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001300:	6963      	ldr	r3, [r4, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d032      	beq.n	800136c <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b51      	ldr	r3, [pc, #324]	; (800144c <HAL_RCC_OscConfig+0x2b0>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff f940 	bl	8000590 <HAL_GetTick>
 8001310:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 8001314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001316:	f013 0f02 	tst.w	r3, #2
 800131a:	d139      	bne.n	8001390 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff f938 	bl	8000590 <HAL_GetTick>
 8001320:	1b40      	subs	r0, r0, r5
 8001322:	2802      	cmp	r0, #2
 8001324:	d9f5      	bls.n	8001312 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8001326:	2003      	movs	r0, #3
 8001328:	e113      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b46      	ldr	r3, [pc, #280]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001332:	d191      	bne.n	8001258 <HAL_RCC_OscConfig+0xbc>
 8001334:	e7cf      	b.n	80012d6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4a43      	ldr	r2, [pc, #268]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 8001338:	6813      	ldr	r3, [r2, #0]
 800133a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800133e:	6921      	ldr	r1, [r4, #16]
 8001340:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e7d7      	b.n	80012f8 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8001348:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800134e:	f7ff f91f 	bl	8000590 <HAL_GetTick>
 8001352:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001354:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f013 0f02 	tst.w	r3, #2
 800135c:	d0cc      	beq.n	80012f8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff f917 	bl	8000590 <HAL_GetTick>
 8001362:	1b40      	subs	r0, r0, r5
 8001364:	2802      	cmp	r0, #2
 8001366:	d9f5      	bls.n	8001354 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8001368:	2003      	movs	r0, #3
 800136a:	e0f2      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_RCC_OscConfig+0x2b0>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001372:	f7ff f90d 	bl	8000590 <HAL_GetTick>
 8001376:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 800137a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137c:	f013 0f02 	tst.w	r3, #2
 8001380:	d006      	beq.n	8001390 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff f905 	bl	8000590 <HAL_GetTick>
 8001386:	1b40      	subs	r0, r0, r5
 8001388:	2802      	cmp	r0, #2
 800138a:	d9f5      	bls.n	8001378 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 800138c:	2003      	movs	r0, #3
 800138e:	e0e0      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	f013 0f04 	tst.w	r3, #4
 8001396:	d079      	beq.n	800148c <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013a0:	d10d      	bne.n	80013be <HAL_RCC_OscConfig+0x222>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80013a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013ba:	2501      	movs	r5, #1
 80013bc:	e000      	b.n	80013c0 <HAL_RCC_OscConfig+0x224>
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_RCC_OscConfig+0x2b4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013c8:	d021      	beq.n	800140e <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ca:	68a3      	ldr	r3, [r4, #8]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d032      	beq.n	8001436 <HAL_RCC_OscConfig+0x29a>
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d03f      	beq.n	8001454 <HAL_RCC_OscConfig+0x2b8>
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80013d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013d8:	f022 0201 	bic.w	r2, r2, #1
 80013dc:	671a      	str	r2, [r3, #112]	; 0x70
 80013de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013e0:	f022 0204 	bic.w	r2, r2, #4
 80013e4:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e6:	68a3      	ldr	r3, [r4, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d03d      	beq.n	8001468 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff f8d0 	bl	8000590 <HAL_GetTick>
 80013f0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	f013 0f02 	tst.w	r3, #2
 80013fa:	d146      	bne.n	800148a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff f8c8 	bl	8000590 <HAL_GetTick>
 8001400:	1b80      	subs	r0, r0, r6
 8001402:	f241 3388 	movw	r3, #5000	; 0x1388
 8001406:	4298      	cmp	r0, r3
 8001408:	d9f3      	bls.n	80013f2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 800140a:	2003      	movs	r0, #3
 800140c:	e0a1      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x2b4>)
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001418:	f7ff f8ba 	bl	8000590 <HAL_GetTick>
 800141c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_RCC_OscConfig+0x2b4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001426:	d1d0      	bne.n	80013ca <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001428:	f7ff f8b2 	bl	8000590 <HAL_GetTick>
 800142c:	1b80      	subs	r0, r0, r6
 800142e:	2802      	cmp	r0, #2
 8001430:	d9f5      	bls.n	800141e <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8001432:	2003      	movs	r0, #3
 8001434:	e08d      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001436:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 8001438:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6713      	str	r3, [r2, #112]	; 0x70
 8001440:	e7d1      	b.n	80013e6 <HAL_RCC_OscConfig+0x24a>
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	42470000 	.word	0x42470000
 800144c:	42470e80 	.word	0x42470e80
 8001450:	40007000 	.word	0x40007000
 8001454:	4b41      	ldr	r3, [pc, #260]	; (800155c <HAL_RCC_OscConfig+0x3c0>)
 8001456:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001458:	f042 0204 	orr.w	r2, r2, #4
 800145c:	671a      	str	r2, [r3, #112]	; 0x70
 800145e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	671a      	str	r2, [r3, #112]	; 0x70
 8001466:	e7be      	b.n	80013e6 <HAL_RCC_OscConfig+0x24a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff f892 	bl	8000590 <HAL_GetTick>
 800146c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_RCC_OscConfig+0x3c0>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	f013 0f02 	tst.w	r3, #2
 8001476:	d008      	beq.n	800148a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff f88a 	bl	8000590 <HAL_GetTick>
 800147c:	1b80      	subs	r0, r0, r6
 800147e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001482:	4298      	cmp	r0, r3
 8001484:	d9f3      	bls.n	800146e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8001486:	2003      	movs	r0, #3
 8001488:	e063      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800148a:	b9e5      	cbnz	r5, 80014c6 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148c:	69a3      	ldr	r3, [r4, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d05e      	beq.n	8001550 <HAL_RCC_OscConfig+0x3b4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001492:	4a32      	ldr	r2, [pc, #200]	; (800155c <HAL_RCC_OscConfig+0x3c0>)
 8001494:	6892      	ldr	r2, [r2, #8]
 8001496:	f002 020c 	and.w	r2, r2, #12
 800149a:	2a08      	cmp	r2, #8
 800149c:	d05b      	beq.n	8001556 <HAL_RCC_OscConfig+0x3ba>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d017      	beq.n	80014d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x3c4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff f872 	bl	8000590 <HAL_GetTick>
 80014ac:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_RCC_OscConfig+0x3c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014b6:	d045      	beq.n	8001544 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f86a 	bl	8000590 <HAL_GetTick>
 80014bc:	1b00      	subs	r0, r0, r4
 80014be:	2802      	cmp	r0, #2
 80014c0:	d9f5      	bls.n	80014ae <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 80014c2:	2003      	movs	r0, #3
 80014c4:	e045      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c6:	4a25      	ldr	r2, [pc, #148]	; (800155c <HAL_RCC_OscConfig+0x3c0>)
 80014c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	e7dc      	b.n	800148c <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_RCC_OscConfig+0x3c4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014d8:	f7ff f85a 	bl	8000590 <HAL_GetTick>
 80014dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <HAL_RCC_OscConfig+0x3c0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014e6:	d006      	beq.n	80014f6 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff f852 	bl	8000590 <HAL_GetTick>
 80014ec:	1b40      	subs	r0, r0, r5
 80014ee:	2802      	cmp	r0, #2
 80014f0:	d9f5      	bls.n	80014de <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 80014f2:	2003      	movs	r0, #3
 80014f4:	e02d      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f6:	69e3      	ldr	r3, [r4, #28]
 80014f8:	6a22      	ldr	r2, [r4, #32]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001502:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	3a01      	subs	r2, #1
 8001508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800150c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800150e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001512:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001514:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001518:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_RCC_OscConfig+0x3c0>)
 800151a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x3c4>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001522:	f7ff f835 	bl	8000590 <HAL_GetTick>
 8001526:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_RCC_OscConfig+0x3c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff f82d 	bl	8000590 <HAL_GetTick>
 8001536:	1b00      	subs	r0, r0, r4
 8001538:	2802      	cmp	r0, #2
 800153a:	d9f5      	bls.n	8001528 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 800153c:	2003      	movs	r0, #3
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001540:	2000      	movs	r0, #0
 8001542:	e006      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
 8001544:	2000      	movs	r0, #0
 8001546:	e004      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
        return HAL_ERROR;
 8001548:	2001      	movs	r0, #1
 800154a:	e002      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
        return HAL_ERROR;
 800154c:	2001      	movs	r0, #1
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
  return HAL_OK;
 8001550:	2000      	movs	r0, #0
}
 8001552:	b002      	add	sp, #8
 8001554:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
 8001558:	e7fb      	b.n	8001552 <HAL_RCC_OscConfig+0x3b6>
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	42470060 	.word	0x42470060

08001564 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001568:	4606      	mov	r6, r0
 800156a:	4688      	mov	r8, r1
 800156c:	4617      	mov	r7, r2
 800156e:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001570:	e03b      	b.n	80015ea <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001572:	b12d      	cbz	r5, 8001580 <SPI_WaitFlagStateUntilTimeout+0x1c>
 8001574:	f7ff f80c 	bl	8000590 <HAL_GetTick>
 8001578:	9b06      	ldr	r3, [sp, #24]
 800157a:	1ac0      	subs	r0, r0, r3
 800157c:	42a8      	cmp	r0, r5
 800157e:	d334      	bcc.n	80015ea <SPI_WaitFlagStateUntilTimeout+0x86>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001580:	6832      	ldr	r2, [r6, #0]
 8001582:	6853      	ldr	r3, [r2, #4]
 8001584:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001588:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800158a:	6873      	ldr	r3, [r6, #4]
 800158c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001590:	d00b      	beq.n	80015aa <SPI_WaitFlagStateUntilTimeout+0x46>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001592:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001598:	d014      	beq.n	80015c4 <SPI_WaitFlagStateUntilTimeout+0x60>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 800159a:	2301      	movs	r3, #1
 800159c:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80015a0:	2300      	movs	r3, #0
 80015a2:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

        return HAL_TIMEOUT;
 80015a6:	2003      	movs	r0, #3
 80015a8:	e027      	b.n	80015fa <SPI_WaitFlagStateUntilTimeout+0x96>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80015aa:	68b3      	ldr	r3, [r6, #8]
 80015ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015b0:	d002      	beq.n	80015b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b6:	d1ec      	bne.n	8001592 <SPI_WaitFlagStateUntilTimeout+0x2e>
          __HAL_SPI_DISABLE(hspi);
 80015b8:	6832      	ldr	r2, [r6, #0]
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e7e6      	b.n	8001592 <SPI_WaitFlagStateUntilTimeout+0x2e>
          SPI_RESET_CRC(hspi);
 80015c4:	6832      	ldr	r2, [r6, #0]
 80015c6:	6813      	ldr	r3, [r2, #0]
 80015c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	0c1b      	lsrs	r3, r3, #16
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	6832      	ldr	r2, [r6, #0]
 80015d4:	6813      	ldr	r3, [r2, #0]
 80015d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	e7dd      	b.n	800159a <SPI_WaitFlagStateUntilTimeout+0x36>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80015de:	2401      	movs	r4, #1
 80015e0:	42bc      	cmp	r4, r7
 80015e2:	d009      	beq.n	80015f8 <SPI_WaitFlagStateUntilTimeout+0x94>
    if(Timeout != HAL_MAX_DELAY)
 80015e4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80015e8:	d1c3      	bne.n	8001572 <SPI_WaitFlagStateUntilTimeout+0xe>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80015ea:	6834      	ldr	r4, [r6, #0]
 80015ec:	68a4      	ldr	r4, [r4, #8]
 80015ee:	ea38 0304 	bics.w	r3, r8, r4
 80015f2:	d0f4      	beq.n	80015de <SPI_WaitFlagStateUntilTimeout+0x7a>
 80015f4:	2400      	movs	r4, #0
 80015f6:	e7f3      	b.n	80015e0 <SPI_WaitFlagStateUntilTimeout+0x7c>
      }
    }
  }

  return HAL_OK;
 80015f8:	2000      	movs	r0, #0
}
 80015fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015fe <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80015fe:	b510      	push	{r4, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	4604      	mov	r4, r0
 8001604:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001606:	9200      	str	r2, [sp, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	f7ff ffaa 	bl	8001564 <SPI_WaitFlagStateUntilTimeout>
 8001610:	b908      	cbnz	r0, 8001616 <SPI_CheckFlag_BSY+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8001612:	b002      	add	sp, #8
 8001614:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001616:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001618:	f043 0320 	orr.w	r3, r3, #32
 800161c:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800161e:	2003      	movs	r0, #3
 8001620:	e7f7      	b.n	8001612 <SPI_CheckFlag_BSY+0x14>

08001622 <HAL_SPI_Init>:
  if(hspi == NULL)
 8001622:	2800      	cmp	r0, #0
 8001624:	d03b      	beq.n	800169e <HAL_SPI_Init+0x7c>
{
 8001626:	b510      	push	{r4, lr}
 8001628:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 800162e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001632:	2b00      	cmp	r3, #0
 8001634:	d02e      	beq.n	8001694 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001636:	2302      	movs	r3, #2
 8001638:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800163c:	6822      	ldr	r2, [r4, #0]
 800163e:	6813      	ldr	r3, [r2, #0]
 8001640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001644:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001646:	6863      	ldr	r3, [r4, #4]
 8001648:	68a2      	ldr	r2, [r4, #8]
 800164a:	4313      	orrs	r3, r2
 800164c:	68e2      	ldr	r2, [r4, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	6922      	ldr	r2, [r4, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	6962      	ldr	r2, [r4, #20]
 8001656:	4313      	orrs	r3, r2
 8001658:	69a2      	ldr	r2, [r4, #24]
 800165a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800165e:	4313      	orrs	r3, r2
 8001660:	69e2      	ldr	r2, [r4, #28]
 8001662:	4313      	orrs	r3, r2
 8001664:	6a22      	ldr	r2, [r4, #32]
 8001666:	4313      	orrs	r3, r2
 8001668:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	430b      	orrs	r3, r1
 800166e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001670:	8b63      	ldrh	r3, [r4, #26]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001678:	6822      	ldr	r2, [r4, #0]
 800167a:	430b      	orrs	r3, r1
 800167c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	69d3      	ldr	r3, [r2, #28]
 8001682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001686:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001688:	2000      	movs	r0, #0
 800168a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800168c:	2301      	movs	r3, #1
 800168e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001692:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001694:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001698:	f001 fb58 	bl	8002d4c <HAL_SPI_MspInit>
 800169c:	e7cb      	b.n	8001636 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 800169e:	2001      	movs	r0, #1
}
 80016a0:	4770      	bx	lr

080016a2 <HAL_SPI_Transmit>:
{
 80016a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80016aa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	f000 80c4 	beq.w	800183c <HAL_SPI_Transmit+0x19a>
 80016b4:	4604      	mov	r4, r0
 80016b6:	460e      	mov	r6, r1
 80016b8:	4691      	mov	r9, r2
 80016ba:	2301      	movs	r3, #1
 80016bc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80016c0:	f7fe ff66 	bl	8000590 <HAL_GetTick>
 80016c4:	4680      	mov	r8, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80016c6:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
 80016ca:	b2ff      	uxtb	r7, r7
 80016cc:	2f01      	cmp	r7, #1
 80016ce:	f040 80aa 	bne.w	8001826 <HAL_SPI_Transmit+0x184>
  if((pData == NULL ) || (Size == 0))
 80016d2:	2e00      	cmp	r6, #0
 80016d4:	f000 80a8 	beq.w	8001828 <HAL_SPI_Transmit+0x186>
 80016d8:	f1b9 0f00 	cmp.w	r9, #0
 80016dc:	f000 80a4 	beq.w	8001828 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80016e0:	2303      	movs	r3, #3
 80016e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80016ea:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80016ec:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80016f0:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80016f4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80016f6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80016f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80016fa:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80016fc:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016fe:	68a3      	ldr	r3, [r4, #8]
 8001700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001704:	d01c      	beq.n	8001740 <HAL_SPI_Transmit+0x9e>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800170e:	d103      	bne.n	8001718 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_ENABLE(hspi);
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001716:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001718:	68e3      	ldr	r3, [r4, #12]
 800171a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800171e:	d015      	beq.n	800174c <HAL_SPI_Transmit+0xaa>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001720:	6863      	ldr	r3, [r4, #4]
 8001722:	b11b      	cbz	r3, 800172c <HAL_SPI_Transmit+0x8a>
 8001724:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001726:	b29b      	uxth	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d141      	bne.n	80017b0 <HAL_SPI_Transmit+0x10e>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001732:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001734:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001736:	b29b      	uxth	r3, r3
 8001738:	3b01      	subs	r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800173e:	e037      	b.n	80017b0 <HAL_SPI_Transmit+0x10e>
    SPI_1LINE_TX(hspi);
 8001740:	6822      	ldr	r2, [r4, #0]
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e7dc      	b.n	8001706 <HAL_SPI_Transmit+0x64>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	b11b      	cbz	r3, 8001758 <HAL_SPI_Transmit+0xb6>
 8001750:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d10d      	bne.n	8001774 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)pData);
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	f836 2b02 	ldrh.w	r2, [r6], #2
 800175e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001760:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29b      	uxth	r3, r3
 8001768:	86e3      	strh	r3, [r4, #54]	; 0x36
 800176a:	e003      	b.n	8001774 <HAL_SPI_Transmit+0xd2>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800176c:	b1d5      	cbz	r5, 80017a4 <HAL_SPI_Transmit+0x102>
 800176e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001772:	d111      	bne.n	8001798 <HAL_SPI_Transmit+0xf6>
    while (hspi->TxXferCount > 0U)
 8001774:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001776:	b29b      	uxth	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d032      	beq.n	80017e2 <HAL_SPI_Transmit+0x140>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	f012 0f02 	tst.w	r2, #2
 8001784:	d0f2      	beq.n	800176c <HAL_SPI_Transmit+0xca>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001786:	f836 2b02 	ldrh.w	r2, [r6], #2
 800178a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 800178c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800178e:	b29b      	uxth	r3, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001796:	e7ed      	b.n	8001774 <HAL_SPI_Transmit+0xd2>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001798:	f7fe fefa 	bl	8000590 <HAL_GetTick>
 800179c:	eba0 0008 	sub.w	r0, r0, r8
 80017a0:	42a8      	cmp	r0, r5
 80017a2:	d3e7      	bcc.n	8001774 <HAL_SPI_Transmit+0xd2>
          errorcode = HAL_TIMEOUT;
 80017a4:	2703      	movs	r7, #3
          goto error;
 80017a6:	e03f      	b.n	8001828 <HAL_SPI_Transmit+0x186>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80017a8:	b1cd      	cbz	r5, 80017de <HAL_SPI_Transmit+0x13c>
 80017aa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80017ae:	d110      	bne.n	80017d2 <HAL_SPI_Transmit+0x130>
    while (hspi->TxXferCount > 0U)
 80017b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80017b2:	b292      	uxth	r2, r2
 80017b4:	b1aa      	cbz	r2, 80017e2 <HAL_SPI_Transmit+0x140>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	f012 0f02 	tst.w	r2, #2
 80017be:	d0f3      	beq.n	80017a8 <HAL_SPI_Transmit+0x106>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80017c0:	f816 2b01 	ldrb.w	r2, [r6], #1
 80017c4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80017c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80017c8:	b292      	uxth	r2, r2
 80017ca:	3a01      	subs	r2, #1
 80017cc:	b292      	uxth	r2, r2
 80017ce:	86e2      	strh	r2, [r4, #54]	; 0x36
 80017d0:	e7ee      	b.n	80017b0 <HAL_SPI_Transmit+0x10e>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80017d2:	f7fe fedd 	bl	8000590 <HAL_GetTick>
 80017d6:	eba0 0008 	sub.w	r0, r0, r8
 80017da:	42a8      	cmp	r0, r5
 80017dc:	d3e8      	bcc.n	80017b0 <HAL_SPI_Transmit+0x10e>
          errorcode = HAL_TIMEOUT;
 80017de:	2703      	movs	r7, #3
          goto error;
 80017e0:	e022      	b.n	8001828 <HAL_SPI_Transmit+0x186>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80017e2:	f8cd 8000 	str.w	r8, [sp]
 80017e6:	462b      	mov	r3, r5
 80017e8:	2201      	movs	r2, #1
 80017ea:	2102      	movs	r1, #2
 80017ec:	4620      	mov	r0, r4
 80017ee:	f7ff feb9 	bl	8001564 <SPI_WaitFlagStateUntilTimeout>
 80017f2:	b108      	cbz	r0, 80017f8 <HAL_SPI_Transmit+0x156>
    errorcode = HAL_TIMEOUT;
 80017f4:	2703      	movs	r7, #3
 80017f6:	e017      	b.n	8001828 <HAL_SPI_Transmit+0x186>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80017f8:	4642      	mov	r2, r8
 80017fa:	4629      	mov	r1, r5
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff fefe 	bl	80015fe <SPI_CheckFlag_BSY>
 8001802:	4603      	mov	r3, r0
 8001804:	b960      	cbnz	r0, 8001820 <HAL_SPI_Transmit+0x17e>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001806:	68a2      	ldr	r2, [r4, #8]
 8001808:	b932      	cbnz	r2, 8001818 <HAL_SPI_Transmit+0x176>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800180a:	9203      	str	r2, [sp, #12]
 800180c:	6822      	ldr	r2, [r4, #0]
 800180e:	68d1      	ldr	r1, [r2, #12]
 8001810:	9103      	str	r1, [sp, #12]
 8001812:	6892      	ldr	r2, [r2, #8]
 8001814:	9203      	str	r2, [sp, #12]
 8001816:	9a03      	ldr	r2, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001818:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800181a:	b92a      	cbnz	r2, 8001828 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800181c:	461f      	mov	r7, r3
 800181e:	e003      	b.n	8001828 <HAL_SPI_Transmit+0x186>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001820:	2320      	movs	r3, #32
 8001822:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001824:	e000      	b.n	8001828 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 8001826:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001828:	2301      	movs	r3, #1
 800182a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800182e:	2300      	movs	r3, #0
 8001830:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001834:	4638      	mov	r0, r7
 8001836:	b005      	add	sp, #20
 8001838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800183c:	2702      	movs	r7, #2
 800183e:	e7f9      	b.n	8001834 <HAL_SPI_Transmit+0x192>

08001840 <HAL_SPI_TransmitReceive>:
{
 8001840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001844:	b085      	sub	sp, #20
 8001846:	4699      	mov	r9, r3
 8001848:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800184a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800184e:	2b01      	cmp	r3, #1
 8001850:	f000 8114 	beq.w	8001a7c <HAL_SPI_TransmitReceive+0x23c>
 8001854:	4604      	mov	r4, r0
 8001856:	460e      	mov	r6, r1
 8001858:	4615      	mov	r5, r2
 800185a:	2301      	movs	r3, #1
 800185c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001860:	f7fe fe96 	bl	8000590 <HAL_GetTick>
 8001864:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8001866:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800186a:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 800186c:	6862      	ldr	r2, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800186e:	2b01      	cmp	r3, #1
 8001870:	d00a      	beq.n	8001888 <HAL_SPI_TransmitReceive+0x48>
 8001872:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001876:	f040 80ed 	bne.w	8001a54 <HAL_SPI_TransmitReceive+0x214>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800187a:	68a2      	ldr	r2, [r4, #8]
 800187c:	2a00      	cmp	r2, #0
 800187e:	f040 80f3 	bne.w	8001a68 <HAL_SPI_TransmitReceive+0x228>
 8001882:	2b04      	cmp	r3, #4
 8001884:	f040 80f2 	bne.w	8001a6c <HAL_SPI_TransmitReceive+0x22c>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001888:	2e00      	cmp	r6, #0
 800188a:	f000 80f1 	beq.w	8001a70 <HAL_SPI_TransmitReceive+0x230>
 800188e:	2d00      	cmp	r5, #0
 8001890:	f000 80f0 	beq.w	8001a74 <HAL_SPI_TransmitReceive+0x234>
 8001894:	f1b9 0f00 	cmp.w	r9, #0
 8001898:	f000 80ee 	beq.w	8001a78 <HAL_SPI_TransmitReceive+0x238>
  if(hspi->State == HAL_SPI_STATE_READY)
 800189c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d02c      	beq.n	8001900 <HAL_SPI_TransmitReceive+0xc0>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80018aa:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80018ac:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80018b0:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80018b4:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80018b6:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80018ba:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80018be:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80018c0:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80018ca:	d103      	bne.n	80018d4 <HAL_SPI_TransmitReceive+0x94>
    __HAL_SPI_ENABLE(hspi);
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d2:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018d4:	68e3      	ldr	r3, [r4, #12]
 80018d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018da:	d015      	beq.n	8001908 <HAL_SPI_TransmitReceive+0xc8>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80018dc:	6863      	ldr	r3, [r4, #4]
 80018de:	b11b      	cbz	r3, 80018e8 <HAL_SPI_TransmitReceive+0xa8>
 80018e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d108      	bne.n	80018fa <HAL_SPI_TransmitReceive+0xba>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	f816 2b01 	ldrb.w	r2, [r6], #1
 80018ee:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80018f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80018fa:	f04f 0901 	mov.w	r9, #1
 80018fe:	e065      	b.n	80019cc <HAL_SPI_TransmitReceive+0x18c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001900:	2305      	movs	r3, #5
 8001902:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8001906:	e7ce      	b.n	80018a6 <HAL_SPI_TransmitReceive+0x66>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001908:	6863      	ldr	r3, [r4, #4]
 800190a:	b11b      	cbz	r3, 8001914 <HAL_SPI_TransmitReceive+0xd4>
 800190c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800190e:	b29b      	uxth	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	f836 2b02 	ldrh.w	r2, [r6], #2
 800191a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800191c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800191e:	b29b      	uxth	r3, r3
 8001920:	3b01      	subs	r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001926:	f04f 0901 	mov.w	r9, #1
 800192a:	e014      	b.n	8001956 <HAL_SPI_TransmitReceive+0x116>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800192c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800192e:	b29b      	uxth	r3, r3
 8001930:	b173      	cbz	r3, 8001950 <HAL_SPI_TransmitReceive+0x110>
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	f012 0f01 	tst.w	r2, #1
 800193a:	d009      	beq.n	8001950 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8001942:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001944:	b29b      	uxth	r3, r3
 8001946:	3b01      	subs	r3, #1
 8001948:	b29b      	uxth	r3, r3
 800194a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800194c:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001950:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001954:	d11d      	bne.n	8001992 <HAL_SPI_TransmitReceive+0x152>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001956:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001958:	b29b      	uxth	r3, r3
 800195a:	b91b      	cbnz	r3, 8001964 <HAL_SPI_TransmitReceive+0x124>
 800195c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d058      	beq.n	8001a16 <HAL_SPI_TransmitReceive+0x1d6>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001964:	f1b9 0f00 	cmp.w	r9, #0
 8001968:	d0e0      	beq.n	800192c <HAL_SPI_TransmitReceive+0xec>
 800196a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800196c:	b29b      	uxth	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0dc      	beq.n	800192c <HAL_SPI_TransmitReceive+0xec>
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	f012 0f02 	tst.w	r2, #2
 800197a:	d0d7      	beq.n	800192c <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800197c:	f836 2b02 	ldrh.w	r2, [r6], #2
 8001980:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001982:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001984:	b29b      	uxth	r3, r3
 8001986:	3b01      	subs	r3, #1
 8001988:	b29b      	uxth	r3, r3
 800198a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800198c:	f04f 0900 	mov.w	r9, #0
 8001990:	e7cc      	b.n	800192c <HAL_SPI_TransmitReceive+0xec>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001992:	f7fe fdfd 	bl	8000590 <HAL_GetTick>
 8001996:	eba0 0008 	sub.w	r0, r0, r8
 800199a:	42b8      	cmp	r0, r7
 800199c:	d3db      	bcc.n	8001956 <HAL_SPI_TransmitReceive+0x116>
        errorcode = HAL_TIMEOUT;
 800199e:	2003      	movs	r0, #3
 80019a0:	e059      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80019a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b173      	cbz	r3, 80019c6 <HAL_SPI_TransmitReceive+0x186>
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	f012 0f01 	tst.w	r2, #1
 80019b0:	d009      	beq.n	80019c6 <HAL_SPI_TransmitReceive+0x186>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 80019b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29b      	uxth	r3, r3
 80019c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80019c2:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80019c6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80019ca:	d11c      	bne.n	8001a06 <HAL_SPI_TransmitReceive+0x1c6>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b913      	cbnz	r3, 80019d8 <HAL_SPI_TransmitReceive+0x198>
 80019d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b1f3      	cbz	r3, 8001a16 <HAL_SPI_TransmitReceive+0x1d6>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80019d8:	f1b9 0f00 	cmp.w	r9, #0
 80019dc:	d0e1      	beq.n	80019a2 <HAL_SPI_TransmitReceive+0x162>
 80019de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0dd      	beq.n	80019a2 <HAL_SPI_TransmitReceive+0x162>
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	f012 0f02 	tst.w	r2, #2
 80019ee:	d0d8      	beq.n	80019a2 <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80019f0:	f816 2b01 	ldrb.w	r2, [r6], #1
 80019f4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80019f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001a00:	f04f 0900 	mov.w	r9, #0
 8001a04:	e7cd      	b.n	80019a2 <HAL_SPI_TransmitReceive+0x162>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001a06:	f7fe fdc3 	bl	8000590 <HAL_GetTick>
 8001a0a:	eba0 0008 	sub.w	r0, r0, r8
 8001a0e:	42b8      	cmp	r0, r7
 8001a10:	d3dc      	bcc.n	80019cc <HAL_SPI_TransmitReceive+0x18c>
        errorcode = HAL_TIMEOUT;
 8001a12:	2003      	movs	r0, #3
 8001a14:	e01f      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001a16:	f8cd 8000 	str.w	r8, [sp]
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fd9f 	bl	8001564 <SPI_WaitFlagStateUntilTimeout>
 8001a26:	b108      	cbz	r0, 8001a2c <HAL_SPI_TransmitReceive+0x1ec>
    errorcode = HAL_TIMEOUT;
 8001a28:	2003      	movs	r0, #3
 8001a2a:	e014      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	4639      	mov	r1, r7
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7ff fde4 	bl	80015fe <SPI_CheckFlag_BSY>
 8001a36:	b948      	cbnz	r0, 8001a4c <HAL_SPI_TransmitReceive+0x20c>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a38:	68a3      	ldr	r3, [r4, #8]
 8001a3a:	b963      	cbnz	r3, 8001a56 <HAL_SPI_TransmitReceive+0x216>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a3c:	9303      	str	r3, [sp, #12]
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	9203      	str	r2, [sp, #12]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	9303      	str	r3, [sp, #12]
 8001a48:	9b03      	ldr	r3, [sp, #12]
 8001a4a:	e004      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001a50:	2001      	movs	r0, #1
    goto error;
 8001a52:	e000      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
    errorcode = HAL_BUSY;
 8001a54:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001a62:	b005      	add	sp, #20
 8001a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8001a68:	2002      	movs	r0, #2
 8001a6a:	e7f4      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	e7f2      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
    errorcode = HAL_ERROR;
 8001a70:	2001      	movs	r0, #1
 8001a72:	e7f0      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
 8001a74:	2001      	movs	r0, #1
 8001a76:	e7ee      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
 8001a78:	2001      	movs	r0, #1
 8001a7a:	e7ec      	b.n	8001a56 <HAL_SPI_TransmitReceive+0x216>
  __HAL_LOCK(hspi);
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	e7f0      	b.n	8001a62 <HAL_SPI_TransmitReceive+0x222>

08001a80 <HAL_SPI_Receive>:
{
 8001a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a84:	b083      	sub	sp, #12
 8001a86:	4604      	mov	r4, r0
 8001a88:	460e      	mov	r6, r1
 8001a8a:	4691      	mov	r9, r2
 8001a8c:	461d      	mov	r5, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001a8e:	6843      	ldr	r3, [r0, #4]
 8001a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a94:	d036      	beq.n	8001b04 <HAL_SPI_Receive+0x84>
  __HAL_LOCK(hspi);
 8001a96:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	f000 80a0 	beq.w	8001be0 <HAL_SPI_Receive+0x160>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001aa6:	f7fe fd73 	bl	8000590 <HAL_GetTick>
 8001aaa:	4680      	mov	r8, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001aac:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
 8001ab0:	b2ff      	uxtb	r7, r7
 8001ab2:	2f01      	cmp	r7, #1
 8001ab4:	f040 8089 	bne.w	8001bca <HAL_SPI_Receive+0x14a>
  if((pData == NULL ) || (Size == 0))
 8001ab8:	2e00      	cmp	r6, #0
 8001aba:	f000 8087 	beq.w	8001bcc <HAL_SPI_Receive+0x14c>
 8001abe:	f1b9 0f00 	cmp.w	r9, #0
 8001ac2:	f000 8083 	beq.w	8001bcc <HAL_SPI_Receive+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ad0:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ad2:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ad6:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ada:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001adc:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ade:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001ae0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ae2:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ae4:	68a3      	ldr	r3, [r4, #8]
 8001ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aea:	d018      	beq.n	8001b1e <HAL_SPI_Receive+0x9e>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001af4:	d103      	bne.n	8001afe <HAL_SPI_Receive+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001afc:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001afe:	68e3      	ldr	r3, [r4, #12]
 8001b00:	b1bb      	cbz	r3, 8001b32 <HAL_SPI_Receive+0xb2>
 8001b02:	e034      	b.n	8001b6e <HAL_SPI_Receive+0xee>
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001b04:	6883      	ldr	r3, [r0, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1c5      	bne.n	8001a96 <HAL_SPI_Receive+0x16>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8001b10:	9500      	str	r5, [sp, #0]
 8001b12:	4613      	mov	r3, r2
 8001b14:	460a      	mov	r2, r1
 8001b16:	f7ff fe93 	bl	8001840 <HAL_SPI_TransmitReceive>
 8001b1a:	4607      	mov	r7, r0
 8001b1c:	e05c      	b.n	8001bd8 <HAL_SPI_Receive+0x158>
    SPI_1LINE_RX(hspi);
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e7e0      	b.n	8001aec <HAL_SPI_Receive+0x6c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b2a:	b1d5      	cbz	r5, 8001b62 <HAL_SPI_Receive+0xe2>
 8001b2c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b30:	d111      	bne.n	8001b56 <HAL_SPI_Receive+0xd6>
    while(hspi->RxXferCount > 0U)
 8001b32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d032      	beq.n	8001ba0 <HAL_SPI_Receive+0x120>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	f012 0f01 	tst.w	r2, #1
 8001b42:	d0f2      	beq.n	8001b2a <HAL_SPI_Receive+0xaa>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8001b44:	7b1b      	ldrb	r3, [r3, #12]
 8001b46:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 8001b4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001b54:	e7ed      	b.n	8001b32 <HAL_SPI_Receive+0xb2>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b56:	f7fe fd1b 	bl	8000590 <HAL_GetTick>
 8001b5a:	eba0 0008 	sub.w	r0, r0, r8
 8001b5e:	42a8      	cmp	r0, r5
 8001b60:	d3e7      	bcc.n	8001b32 <HAL_SPI_Receive+0xb2>
          errorcode = HAL_TIMEOUT;
 8001b62:	2703      	movs	r7, #3
          goto error;
 8001b64:	e032      	b.n	8001bcc <HAL_SPI_Receive+0x14c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b66:	b1cd      	cbz	r5, 8001b9c <HAL_SPI_Receive+0x11c>
 8001b68:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b6c:	d110      	bne.n	8001b90 <HAL_SPI_Receive+0x110>
    while(hspi->RxXferCount > 0U)
 8001b6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	b1ab      	cbz	r3, 8001ba0 <HAL_SPI_Receive+0x120>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	f012 0f01 	tst.w	r2, #1
 8001b7c:	d0f3      	beq.n	8001b66 <HAL_SPI_Receive+0xe6>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001b84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001b8e:	e7ee      	b.n	8001b6e <HAL_SPI_Receive+0xee>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b90:	f7fe fcfe 	bl	8000590 <HAL_GetTick>
 8001b94:	eba0 0008 	sub.w	r0, r0, r8
 8001b98:	42a8      	cmp	r0, r5
 8001b9a:	d3e8      	bcc.n	8001b6e <HAL_SPI_Receive+0xee>
          errorcode = HAL_TIMEOUT;
 8001b9c:	2703      	movs	r7, #3
          goto error;
 8001b9e:	e015      	b.n	8001bcc <HAL_SPI_Receive+0x14c>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ba0:	6863      	ldr	r3, [r4, #4]
 8001ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ba6:	d003      	beq.n	8001bb0 <HAL_SPI_Receive+0x130>
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ba8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001baa:	b97b      	cbnz	r3, 8001bcc <HAL_SPI_Receive+0x14c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bac:	2700      	movs	r7, #0
 8001bae:	e00d      	b.n	8001bcc <HAL_SPI_Receive+0x14c>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bb0:	68a3      	ldr	r3, [r4, #8]
 8001bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb6:	d002      	beq.n	8001bbe <HAL_SPI_Receive+0x13e>
 8001bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbc:	d1f4      	bne.n	8001ba8 <HAL_SPI_Receive+0x128>
    __HAL_SPI_DISABLE(hspi);
 8001bbe:	6822      	ldr	r2, [r4, #0]
 8001bc0:	6813      	ldr	r3, [r2, #0]
 8001bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e7ee      	b.n	8001ba8 <HAL_SPI_Receive+0x128>
    errorcode = HAL_BUSY;
 8001bca:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001bd8:	4638      	mov	r0, r7
 8001bda:	b003      	add	sp, #12
 8001bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8001be0:	2702      	movs	r7, #2
 8001be2:	e7f9      	b.n	8001bd8 <HAL_SPI_Receive+0x158>

08001be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001be4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001be6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001be8:	6a05      	ldr	r5, [r0, #32]
 8001bea:	f025 0501 	bic.w	r5, r5, #1
 8001bee:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001bf0:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bf2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bf6:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bfa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001bfe:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c00:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c02:	6203      	str	r3, [r0, #32]
}
 8001c04:	bc30      	pop	{r4, r5}
 8001c06:	4770      	bx	lr

08001c08 <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001c08:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c0a:	6a05      	ldr	r5, [r0, #32]
 8001c0c:	f025 0510 	bic.w	r5, r5, #16
 8001c10:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c12:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001c14:	6a05      	ldr	r5, [r0, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001c16:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001c1a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c1e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c22:	031b      	lsls	r3, r3, #12
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c28:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c2c:	0109      	lsls	r1, r1, #4
 8001c2e:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8001c32:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c34:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c36:	6201      	str	r1, [r0, #32]
}
 8001c38:	bc30      	pop	{r4, r5}
 8001c3a:	4770      	bx	lr

08001c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c3c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c3e:	6a05      	ldr	r5, [r0, #32]
 8001c40:	f025 0510 	bic.w	r5, r5, #16
 8001c44:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c46:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001c48:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c4a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c4e:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c56:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c5a:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c5c:	6203      	str	r3, [r0, #32]
}
 8001c5e:	bc30      	pop	{r4, r5}
 8001c60:	4770      	bx	lr

08001c62 <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001c62:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c64:	6a05      	ldr	r5, [r0, #32]
 8001c66:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8001c6a:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001c6c:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8001c6e:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001c70:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8001c74:	4314      	orrs	r4, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001c76:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001c80:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c84:	0209      	lsls	r1, r1, #8
 8001c86:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8001c8a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001c8c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8001c8e:	6201      	str	r1, [r0, #32]
}
 8001c90:	bc30      	pop	{r4, r5}
 8001c92:	4770      	bx	lr

08001c94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001c94:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c96:	6a05      	ldr	r5, [r0, #32]
 8001c98:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8001c9c:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001c9e:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8001ca0:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001ca2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001ca6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001caa:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cae:	031b      	lsls	r3, r3, #12
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001cb4:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001cb8:	0309      	lsls	r1, r1, #12
 8001cba:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8001cbe:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001cc0:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8001cc2:	6201      	str	r1, [r0, #32]
}
 8001cc4:	bc30      	pop	{r4, r5}
 8001cc6:	4770      	bx	lr

08001cc8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001cc8:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001cce:	f041 0107 	orr.w	r1, r1, #7
 8001cd2:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001cd4:	6081      	str	r1, [r0, #8]
}
 8001cd6:	4770      	bx	lr

08001cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cd8:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001cda:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cdc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001ce0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ce8:	6082      	str	r2, [r0, #8]
} 
 8001cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf0:	6802      	ldr	r2, [r0, #0]
 8001cf2:	68d3      	ldr	r3, [r2, #12]
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8001cfa:	6802      	ldr	r2, [r0, #0]
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	2000      	movs	r0, #0
 8001d06:	4770      	bx	lr

08001d08 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001d08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d07e      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0x106>
{
 8001d10:	b510      	push	{r4, lr}
 8001d12:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001d14:	2301      	movs	r3, #1
 8001d16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001d20:	6802      	ldr	r2, [r0, #0]
 8001d22:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001d2c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d2e:	680b      	ldr	r3, [r1, #0]
 8001d30:	2b50      	cmp	r3, #80	; 0x50
 8001d32:	d049      	beq.n	8001dc8 <HAL_TIM_ConfigClockSource+0xc0>
 8001d34:	d819      	bhi.n	8001d6a <HAL_TIM_ConfigClockSource+0x62>
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d05f      	beq.n	8001dfa <HAL_TIM_ConfigClockSource+0xf2>
 8001d3a:	d90d      	bls.n	8001d58 <HAL_TIM_ConfigClockSource+0x50>
 8001d3c:	2b30      	cmp	r3, #48	; 0x30
 8001d3e:	d061      	beq.n	8001e04 <HAL_TIM_ConfigClockSource+0xfc>
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d13a      	bne.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001d44:	68ca      	ldr	r2, [r1, #12]
 8001d46:	6849      	ldr	r1, [r1, #4]
 8001d48:	6800      	ldr	r0, [r0, #0]
 8001d4a:	f7ff ff4b 	bl	8001be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	6820      	ldr	r0, [r4, #0]
 8001d52:	f7ff ffb9 	bl	8001cc8 <TIM_ITRx_SetConfig>
    break;
 8001d56:	e030      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d049      	beq.n	8001df0 <HAL_TIM_ConfigClockSource+0xe8>
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d12c      	bne.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001d60:	2110      	movs	r1, #16
 8001d62:	6800      	ldr	r0, [r0, #0]
 8001d64:	f7ff ffb0 	bl	8001cc8 <TIM_ITRx_SetConfig>
    break;
 8001d68:	e027      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
 8001d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6e:	d01f      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0xa8>
 8001d70:	d90e      	bls.n	8001d90 <HAL_TIM_ConfigClockSource+0x88>
 8001d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d76:	d120      	bne.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ETR_SetConfig(htim->Instance, 
 8001d78:	68cb      	ldr	r3, [r1, #12]
 8001d7a:	684a      	ldr	r2, [r1, #4]
 8001d7c:	6889      	ldr	r1, [r1, #8]
 8001d7e:	6800      	ldr	r0, [r0, #0]
 8001d80:	f7ff ffaa 	bl	8001cd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	6893      	ldr	r3, [r2, #8]
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6093      	str	r3, [r2, #8]
    break;
 8001d8e:	e014      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
 8001d90:	2b60      	cmp	r3, #96	; 0x60
 8001d92:	d023      	beq.n	8001ddc <HAL_TIM_ConfigClockSource+0xd4>
 8001d94:	2b70      	cmp	r3, #112	; 0x70
 8001d96:	d110      	bne.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ETR_SetConfig(htim->Instance, 
 8001d98:	68cb      	ldr	r3, [r1, #12]
 8001d9a:	684a      	ldr	r2, [r1, #4]
 8001d9c:	6889      	ldr	r1, [r1, #8]
 8001d9e:	6800      	ldr	r0, [r0, #0]
 8001da0:	f7ff ff9a 	bl	8001cd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001dac:	6093      	str	r3, [r2, #8]
    break;
 8001dae:	e004      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001db0:	6802      	ldr	r2, [r0, #0]
 8001db2:	6893      	ldr	r3, [r2, #8]
 8001db4:	f023 0307 	bic.w	r3, r3, #7
 8001db8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001dc6:	bd10      	pop	{r4, pc}
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001dc8:	68ca      	ldr	r2, [r1, #12]
 8001dca:	6849      	ldr	r1, [r1, #4]
 8001dcc:	6800      	ldr	r0, [r0, #0]
 8001dce:	f7ff ff09 	bl	8001be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dd2:	2150      	movs	r1, #80	; 0x50
 8001dd4:	6820      	ldr	r0, [r4, #0]
 8001dd6:	f7ff ff77 	bl	8001cc8 <TIM_ITRx_SetConfig>
    break;
 8001dda:	e7ee      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001ddc:	68ca      	ldr	r2, [r1, #12]
 8001dde:	6849      	ldr	r1, [r1, #4]
 8001de0:	6800      	ldr	r0, [r0, #0]
 8001de2:	f7ff ff2b 	bl	8001c3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001de6:	2160      	movs	r1, #96	; 0x60
 8001de8:	6820      	ldr	r0, [r4, #0]
 8001dea:	f7ff ff6d 	bl	8001cc8 <TIM_ITRx_SetConfig>
    break;
 8001dee:	e7e4      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	6800      	ldr	r0, [r0, #0]
 8001df4:	f7ff ff68 	bl	8001cc8 <TIM_ITRx_SetConfig>
    break;
 8001df8:	e7df      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	6800      	ldr	r0, [r0, #0]
 8001dfe:	f7ff ff63 	bl	8001cc8 <TIM_ITRx_SetConfig>
    break;
 8001e02:	e7da      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001e04:	2130      	movs	r1, #48	; 0x30
 8001e06:	6800      	ldr	r0, [r0, #0]
 8001e08:	f7ff ff5e 	bl	8001cc8 <TIM_ITRx_SetConfig>
    break;
 8001e0c:	e7d5      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xb2>
  __HAL_LOCK(htim);
 8001e0e:	2002      	movs	r0, #2
}
 8001e10:	4770      	bx	lr

08001e12 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001e12:	4770      	bx	lr

08001e14 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001e14:	4770      	bx	lr

08001e16 <HAL_TIM_TriggerCallback>:
}
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_IRQHandler>:
{
 8001e18:	b510      	push	{r4, lr}
 8001e1a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e1c:	6803      	ldr	r3, [r0, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	f012 0f02 	tst.w	r2, #2
 8001e24:	d011      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	f012 0f02 	tst.w	r2, #2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e2e:	f06f 0202 	mvn.w	r2, #2
 8001e32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e38:	6803      	ldr	r3, [r0, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f013 0f03 	tst.w	r3, #3
 8001e40:	d070      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	f000 fe4f 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	2300      	movs	r3, #0
 8001e48:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	f012 0f04 	tst.w	r2, #4
 8001e52:	d012      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	f012 0f04 	tst.w	r2, #4
 8001e5a:	d00e      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e5c:	f06f 0204 	mvn.w	r2, #4
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e62:	2302      	movs	r3, #2
 8001e64:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001e6e:	d05f      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e70:	4620      	mov	r0, r4
 8001e72:	f000 fe37 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	2300      	movs	r3, #0
 8001e78:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	f012 0f08 	tst.w	r2, #8
 8001e82:	d012      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	f012 0f08 	tst.w	r2, #8
 8001e8a:	d00e      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e8c:	f06f 0208 	mvn.w	r2, #8
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e92:	2304      	movs	r3, #4
 8001e94:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f013 0f03 	tst.w	r3, #3
 8001e9e:	d04e      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f000 fe1f 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	f012 0f10 	tst.w	r2, #16
 8001eb2:	d012      	beq.n	8001eda <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	f012 0f10 	tst.w	r2, #16
 8001eba:	d00e      	beq.n	8001eda <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ebc:	f06f 0210 	mvn.w	r2, #16
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001ece:	d03d      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f000 fe07 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	f012 0f01 	tst.w	r2, #1
 8001ee2:	d003      	beq.n	8001eec <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	f012 0f01 	tst.w	r2, #1
 8001eea:	d136      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001efc:	d134      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001f06:	d003      	beq.n	8001f10 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001f0e:	d132      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	f012 0f20 	tst.w	r2, #32
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	f012 0f20 	tst.w	r2, #32
 8001f20:	d130      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x16c>
}
 8001f22:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f24:	f7ff ff75 	bl	8001e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7ff ff73 	bl	8001e14 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f2e:	e78a      	b.n	8001e46 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff ff6e 	bl	8001e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7ff ff6c 	bl	8001e14 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f3c:	e79b      	b.n	8001e76 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff ff67 	bl	8001e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff ff65 	bl	8001e14 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f4a:	e7ac      	b.n	8001ea6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f7ff ff60 	bl	8001e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7ff ff5e 	bl	8001e14 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f58:	e7bd      	b.n	8001ed6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f5a:	f06f 0201 	mvn.w	r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f60:	4620      	mov	r0, r4
 8001f62:	f000 fd77 	bl	8002a54 <HAL_TIM_PeriodElapsedCallback>
 8001f66:	e7c1      	b.n	8001eec <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f6c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f000 f9ab 	bl	80022ca <HAL_TIMEx_BreakCallback>
 8001f74:	e7c3      	b.n	8001efe <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f7a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff ff4a 	bl	8001e16 <HAL_TIM_TriggerCallback>
 8001f82:	e7c5      	b.n	8001f10 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f84:	f06f 0220 	mvn.w	r2, #32
 8001f88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f000 f99c 	bl	80022c8 <HAL_TIMEx_CommutationCallback>
}
 8001f90:	e7c7      	b.n	8001f22 <HAL_TIM_IRQHandler+0x10a>
	...

08001f94 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001f94:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001f96:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <TIM_Base_SetConfig+0xbc>)
 8001f98:	4290      	cmp	r0, r2
 8001f9a:	d012      	beq.n	8001fc2 <TIM_Base_SetConfig+0x2e>
 8001f9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fa0:	d00f      	beq.n	8001fc2 <TIM_Base_SetConfig+0x2e>
 8001fa2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fa6:	4290      	cmp	r0, r2
 8001fa8:	d00b      	beq.n	8001fc2 <TIM_Base_SetConfig+0x2e>
 8001faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fae:	4290      	cmp	r0, r2
 8001fb0:	d007      	beq.n	8001fc2 <TIM_Base_SetConfig+0x2e>
 8001fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fb6:	4290      	cmp	r0, r2
 8001fb8:	d003      	beq.n	8001fc2 <TIM_Base_SetConfig+0x2e>
 8001fba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001fbe:	4290      	cmp	r0, r2
 8001fc0:	d103      	bne.n	8001fca <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fc6:	684a      	ldr	r2, [r1, #4]
 8001fc8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001fca:	4a21      	ldr	r2, [pc, #132]	; (8002050 <TIM_Base_SetConfig+0xbc>)
 8001fcc:	4290      	cmp	r0, r2
 8001fce:	d02a      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 8001fd0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fd4:	d027      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 8001fd6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	d023      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 8001fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d01f      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 8001fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d01b      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 8001fee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	d017      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 8001ff6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	d013      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 8001ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002002:	4290      	cmp	r0, r2
 8002004:	d00f      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 8002006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800200a:	4290      	cmp	r0, r2
 800200c:	d00b      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 800200e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002012:	4290      	cmp	r0, r2
 8002014:	d007      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 8002016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800201a:	4290      	cmp	r0, r2
 800201c:	d003      	beq.n	8002026 <TIM_Base_SetConfig+0x92>
 800201e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002022:	4290      	cmp	r0, r2
 8002024:	d103      	bne.n	800202e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800202a:	68ca      	ldr	r2, [r1, #12]
 800202c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800202e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002030:	688b      	ldr	r3, [r1, #8]
 8002032:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002034:	680b      	ldr	r3, [r1, #0]
 8002036:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <TIM_Base_SetConfig+0xbc>)
 800203a:	4298      	cmp	r0, r3
 800203c:	d003      	beq.n	8002046 <TIM_Base_SetConfig+0xb2>
 800203e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002042:	4298      	cmp	r0, r3
 8002044:	d101      	bne.n	800204a <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
 8002046:	690b      	ldr	r3, [r1, #16]
 8002048:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800204a:	2301      	movs	r3, #1
 800204c:	6143      	str	r3, [r0, #20]
}
 800204e:	4770      	bx	lr
 8002050:	40010000 	.word	0x40010000

08002054 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002054:	b1b0      	cbz	r0, 8002084 <HAL_TIM_Base_Init+0x30>
{ 
 8002056:	b510      	push	{r4, lr}
 8002058:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800205a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800205e:	b163      	cbz	r3, 800207a <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8002060:	2302      	movs	r3, #2
 8002062:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002066:	4621      	mov	r1, r4
 8002068:	f851 0b04 	ldr.w	r0, [r1], #4
 800206c:	f7ff ff92 	bl	8001f94 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002070:	2301      	movs	r3, #1
 8002072:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002076:	2000      	movs	r0, #0
}
 8002078:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800207a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800207e:	f001 fab3 	bl	80035e8 <HAL_TIM_Base_MspInit>
 8002082:	e7ed      	b.n	8002060 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002084:	2001      	movs	r0, #1
}
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_IC_Init>:
  if(htim == NULL)
 8002088:	b1b0      	cbz	r0, 80020b8 <HAL_TIM_IC_Init+0x30>
{
 800208a:	b510      	push	{r4, lr}
 800208c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800208e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002092:	b163      	cbz	r3, 80020ae <HAL_TIM_IC_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;   
 8002094:	2302      	movs	r3, #2
 8002096:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800209a:	4621      	mov	r1, r4
 800209c:	f851 0b04 	ldr.w	r0, [r1], #4
 80020a0:	f7ff ff78 	bl	8001f94 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80020aa:	2000      	movs	r0, #0
}
 80020ac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80020ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 80020b2:	f001 fa45 	bl	8003540 <HAL_TIM_IC_MspInit>
 80020b6:	e7ed      	b.n	8002094 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 80020b8:	2001      	movs	r0, #1
}
 80020ba:	4770      	bx	lr

080020bc <TIM_TI1_SetConfig>:
{
 80020bc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020be:	6a04      	ldr	r4, [r0, #32]
 80020c0:	f024 0401 	bic.w	r4, r4, #1
 80020c4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020c6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80020c8:	6a06      	ldr	r6, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80020ca:	4d1a      	ldr	r5, [pc, #104]	; (8002134 <TIM_TI1_SetConfig+0x78>)
 80020cc:	42a8      	cmp	r0, r5
 80020ce:	d01f      	beq.n	8002110 <TIM_TI1_SetConfig+0x54>
 80020d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020d4:	d01c      	beq.n	8002110 <TIM_TI1_SetConfig+0x54>
 80020d6:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 80020da:	42a8      	cmp	r0, r5
 80020dc:	d018      	beq.n	8002110 <TIM_TI1_SetConfig+0x54>
 80020de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020e2:	42a8      	cmp	r0, r5
 80020e4:	d014      	beq.n	8002110 <TIM_TI1_SetConfig+0x54>
 80020e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020ea:	42a8      	cmp	r0, r5
 80020ec:	d010      	beq.n	8002110 <TIM_TI1_SetConfig+0x54>
 80020ee:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 80020f2:	42a8      	cmp	r0, r5
 80020f4:	d00c      	beq.n	8002110 <TIM_TI1_SetConfig+0x54>
 80020f6:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80020fa:	42a8      	cmp	r0, r5
 80020fc:	d008      	beq.n	8002110 <TIM_TI1_SetConfig+0x54>
 80020fe:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8002102:	42a8      	cmp	r0, r5
 8002104:	d004      	beq.n	8002110 <TIM_TI1_SetConfig+0x54>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002106:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	e002      	b.n	8002116 <TIM_TI1_SetConfig+0x5a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002110:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002114:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002116:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002120:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002124:	f001 010a 	and.w	r1, r1, #10
 8002128:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800212a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800212c:	6201      	str	r1, [r0, #32]
}
 800212e:	bc70      	pop	{r4, r5, r6}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40010000 	.word	0x40010000

08002138 <HAL_TIM_IC_ConfigChannel>:
{
 8002138:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800213a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800213e:	2b01      	cmp	r3, #1
 8002140:	d058      	beq.n	80021f4 <HAL_TIM_IC_ConfigChannel+0xbc>
 8002142:	4604      	mov	r4, r0
 8002144:	460d      	mov	r5, r1
 8002146:	2301      	movs	r3, #1
 8002148:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	2302      	movs	r3, #2
 800214e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8002152:	b1da      	cbz	r2, 800218c <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 8002154:	2a04      	cmp	r2, #4
 8002156:	d02a      	beq.n	80021ae <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 8002158:	2a08      	cmp	r2, #8
 800215a:	d03a      	beq.n	80021d2 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance, 
 800215c:	68cb      	ldr	r3, [r1, #12]
 800215e:	684a      	ldr	r2, [r1, #4]
 8002160:	6809      	ldr	r1, [r1, #0]
 8002162:	6800      	ldr	r0, [r0, #0]
 8002164:	f7ff fd96 	bl	8001c94 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002168:	6822      	ldr	r2, [r4, #0]
 800216a:	69d3      	ldr	r3, [r2, #28]
 800216c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002170:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	69d3      	ldr	r3, [r2, #28]
 8002176:	68a9      	ldr	r1, [r5, #8]
 8002178:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800217c:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800217e:	2301      	movs	r3, #1
 8002180:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002184:	2000      	movs	r0, #0
 8002186:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800218a:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800218c:	68cb      	ldr	r3, [r1, #12]
 800218e:	684a      	ldr	r2, [r1, #4]
 8002190:	6809      	ldr	r1, [r1, #0]
 8002192:	6800      	ldr	r0, [r0, #0]
 8002194:	f7ff ff92 	bl	80020bc <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002198:	6822      	ldr	r2, [r4, #0]
 800219a:	6993      	ldr	r3, [r2, #24]
 800219c:	f023 030c 	bic.w	r3, r3, #12
 80021a0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80021a2:	6822      	ldr	r2, [r4, #0]
 80021a4:	6993      	ldr	r3, [r2, #24]
 80021a6:	68a9      	ldr	r1, [r5, #8]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	e7e7      	b.n	800217e <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance, 
 80021ae:	68cb      	ldr	r3, [r1, #12]
 80021b0:	684a      	ldr	r2, [r1, #4]
 80021b2:	6809      	ldr	r1, [r1, #0]
 80021b4:	6800      	ldr	r0, [r0, #0]
 80021b6:	f7ff fd27 	bl	8001c08 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80021ba:	6822      	ldr	r2, [r4, #0]
 80021bc:	6993      	ldr	r3, [r2, #24]
 80021be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021c2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80021c4:	6822      	ldr	r2, [r4, #0]
 80021c6:	6993      	ldr	r3, [r2, #24]
 80021c8:	68a9      	ldr	r1, [r5, #8]
 80021ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	e7d5      	b.n	800217e <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,  
 80021d2:	68cb      	ldr	r3, [r1, #12]
 80021d4:	684a      	ldr	r2, [r1, #4]
 80021d6:	6809      	ldr	r1, [r1, #0]
 80021d8:	6800      	ldr	r0, [r0, #0]
 80021da:	f7ff fd42 	bl	8001c62 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80021de:	6822      	ldr	r2, [r4, #0]
 80021e0:	69d3      	ldr	r3, [r2, #28]
 80021e2:	f023 030c 	bic.w	r3, r3, #12
 80021e6:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	69d3      	ldr	r3, [r2, #28]
 80021ec:	68a9      	ldr	r1, [r5, #8]
 80021ee:	430b      	orrs	r3, r1
 80021f0:	61d3      	str	r3, [r2, #28]
 80021f2:	e7c4      	b.n	800217e <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 80021f4:	2002      	movs	r0, #2
 80021f6:	e7c8      	b.n	800218a <HAL_TIM_IC_ConfigChannel+0x52>

080021f8 <TIM_CCxChannelCmd>:
{
 80021f8:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 80021fa:	2301      	movs	r3, #1
 80021fc:	fa03 f401 	lsl.w	r4, r3, r1
  TIMx->CCER &= ~tmp;
 8002200:	6a03      	ldr	r3, [r0, #32]
 8002202:	ea23 0304 	bic.w	r3, r3, r4
 8002206:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002208:	6a03      	ldr	r3, [r0, #32]
 800220a:	fa02 f101 	lsl.w	r1, r2, r1
 800220e:	430b      	orrs	r3, r1
 8002210:	6203      	str	r3, [r0, #32]
}
 8002212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_IC_Start_IT>:
{
 8002218:	b510      	push	{r4, lr}
 800221a:	4604      	mov	r4, r0
  switch (Channel)
 800221c:	290c      	cmp	r1, #12
 800221e:	d80d      	bhi.n	800223c <HAL_TIM_IC_Start_IT+0x24>
 8002220:	e8df f001 	tbb	[pc, r1]
 8002224:	0c0c0c07 	.word	0x0c0c0c07
 8002228:	0c0c0c17 	.word	0x0c0c0c17
 800222c:	0c0c0c1d 	.word	0x0c0c0c1d
 8002230:	23          	.byte	0x23
 8002231:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002232:	6802      	ldr	r2, [r0, #0]
 8002234:	68d3      	ldr	r3, [r2, #12]
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800223c:	2201      	movs	r2, #1
 800223e:	6820      	ldr	r0, [r4, #0]
 8002240:	f7ff ffda 	bl	80021f8 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8002244:	6822      	ldr	r2, [r4, #0]
 8002246:	6813      	ldr	r3, [r2, #0]
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6013      	str	r3, [r2, #0]
} 
 800224e:	2000      	movs	r0, #0
 8002250:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002252:	6802      	ldr	r2, [r0, #0]
 8002254:	68d3      	ldr	r3, [r2, #12]
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	60d3      	str	r3, [r2, #12]
    break;
 800225c:	e7ee      	b.n	800223c <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800225e:	6802      	ldr	r2, [r0, #0]
 8002260:	68d3      	ldr	r3, [r2, #12]
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	60d3      	str	r3, [r2, #12]
    break;
 8002268:	e7e8      	b.n	800223c <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800226a:	6802      	ldr	r2, [r0, #0]
 800226c:	68d3      	ldr	r3, [r2, #12]
 800226e:	f043 0310 	orr.w	r3, r3, #16
 8002272:	60d3      	str	r3, [r2, #12]
    break;
 8002274:	e7e2      	b.n	800223c <HAL_TIM_IC_Start_IT+0x24>

08002276 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002276:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800227a:	2b01      	cmp	r3, #1
 800227c:	d022      	beq.n	80022c4 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 800227e:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002280:	2201      	movs	r2, #1
 8002282:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002286:	2302      	movs	r3, #2
 8002288:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800228c:	6804      	ldr	r4, [r0, #0]
 800228e:	6863      	ldr	r3, [r4, #4]
 8002290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002294:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002296:	6804      	ldr	r4, [r0, #0]
 8002298:	6863      	ldr	r3, [r4, #4]
 800229a:	680d      	ldr	r5, [r1, #0]
 800229c:	432b      	orrs	r3, r5
 800229e:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80022a0:	6804      	ldr	r4, [r0, #0]
 80022a2:	68a3      	ldr	r3, [r4, #8]
 80022a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a8:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022aa:	6804      	ldr	r4, [r0, #0]
 80022ac:	68a3      	ldr	r3, [r4, #8]
 80022ae:	6849      	ldr	r1, [r1, #4]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80022b8:	2300      	movs	r3, #0
 80022ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80022be:	4618      	mov	r0, r3
} 
 80022c0:	bc30      	pop	{r4, r5}
 80022c2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80022c4:	2002      	movs	r0, #2
} 
 80022c6:	4770      	bx	lr

080022c8 <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80022c8:	4770      	bx	lr

080022ca <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ca:	4770      	bx	lr

080022cc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80022cc:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
 80022ce:	480f      	ldr	r0, [pc, #60]	; (800230c <MX_CAN1_Init+0x40>)
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_CAN1_Init+0x44>)
 80022d2:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 5;
 80022d4:	2305      	movs	r3, #5
 80022d6:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80022d8:	2300      	movs	r3, #0
 80022da:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022dc:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80022de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022e2:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80022e4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80022e8:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80022ea:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80022ec:	2201      	movs	r2, #1
 80022ee:	7642      	strb	r2, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80022f0:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80022f2:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80022f4:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80022f6:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80022f8:	f7fe f950 	bl	800059c <HAL_CAN_Init>
 80022fc:	b900      	cbnz	r0, 8002300 <MX_CAN1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80022fe:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002300:	2149      	movs	r1, #73	; 0x49
 8002302:	4804      	ldr	r0, [pc, #16]	; (8002314 <MX_CAN1_Init+0x48>)
 8002304:	f000 fc0a 	bl	8002b1c <_Error_Handler>
}
 8002308:	e7f9      	b.n	80022fe <MX_CAN1_Init+0x32>
 800230a:	bf00      	nop
 800230c:	2000014c 	.word	0x2000014c
 8002310:	40006400 	.word	0x40006400
 8002314:	08003728 	.word	0x08003728

08002318 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002318:	b508      	push	{r3, lr}

  hcan2.Instance = CAN2;
 800231a:	480f      	ldr	r0, [pc, #60]	; (8002358 <MX_CAN2_Init+0x40>)
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <MX_CAN2_Init+0x44>)
 800231e:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = 5;
 8002320:	2305      	movs	r3, #5
 8002322:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002324:	2300      	movs	r3, #0
 8002326:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002328:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 800232a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800232e:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002330:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002334:	6142      	str	r2, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002336:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8002338:	2201      	movs	r2, #1
 800233a:	7642      	strb	r2, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800233c:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800233e:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002340:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002342:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002344:	f7fe f92a 	bl	800059c <HAL_CAN_Init>
 8002348:	b900      	cbnz	r0, 800234c <MX_CAN2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800234a:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800234c:	215f      	movs	r1, #95	; 0x5f
 800234e:	4804      	ldr	r0, [pc, #16]	; (8002360 <MX_CAN2_Init+0x48>)
 8002350:	f000 fbe4 	bl	8002b1c <_Error_Handler>
}
 8002354:	e7f9      	b.n	800234a <MX_CAN2_Init+0x32>
 8002356:	bf00      	nop
 8002358:	20000124 	.word	0x20000124
 800235c:	40006800 	.word	0x40006800
 8002360:	08003728 	.word	0x08003728

08002364 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002364:	b530      	push	{r4, r5, lr}
 8002366:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <HAL_CAN_MspInit+0xfc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d004      	beq.n	800237a <HAL_CAN_MspInit+0x16>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8002370:	4a3c      	ldr	r2, [pc, #240]	; (8002464 <HAL_CAN_MspInit+0x100>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d034      	beq.n	80023e0 <HAL_CAN_MspInit+0x7c>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002376:	b009      	add	sp, #36	; 0x24
 8002378:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 800237a:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <HAL_CAN_MspInit+0x104>)
 800237c:	6813      	ldr	r3, [r2, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002382:	2b01      	cmp	r3, #1
 8002384:	d01f      	beq.n	80023c6 <HAL_CAN_MspInit+0x62>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002386:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800238a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2402      	movs	r4, #2
 800238e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2500      	movs	r5, #0
 8002392:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002398:	2309      	movs	r3, #9
 800239a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239c:	a903      	add	r1, sp, #12
 800239e:	4833      	ldr	r0, [pc, #204]	; (800246c <HAL_CAN_MspInit+0x108>)
 80023a0:	f7fe fcd2 	bl	8000d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 80023a4:	462a      	mov	r2, r5
 80023a6:	4621      	mov	r1, r4
 80023a8:	2014      	movs	r0, #20
 80023aa:	f7fe fc61 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80023ae:	2014      	movs	r0, #20
 80023b0:	f7fe fc92 	bl	8000cd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 80023b4:	462a      	mov	r2, r5
 80023b6:	4621      	mov	r1, r4
 80023b8:	2015      	movs	r0, #21
 80023ba:	f7fe fc59 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80023be:	2015      	movs	r0, #21
 80023c0:	f7fe fc8a 	bl	8000cd8 <HAL_NVIC_EnableIRQ>
 80023c4:	e7d7      	b.n	8002376 <HAL_CAN_MspInit+0x12>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_CAN_MspInit+0x10c>)
 80023cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	9b00      	ldr	r3, [sp, #0]
 80023de:	e7d2      	b.n	8002386 <HAL_CAN_MspInit+0x22>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_CAN_MspInit+0x10c>)
 80023e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	9b01      	ldr	r3, [sp, #4]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <HAL_CAN_MspInit+0x104>)
 80023fa:	6813      	ldr	r3, [r2, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002400:	2b01      	cmp	r3, #1
 8002402:	d01f      	beq.n	8002444 <HAL_CAN_MspInit+0xe0>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002404:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002408:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2402      	movs	r4, #2
 800240c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2500      	movs	r5, #0
 8002410:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002416:	2309      	movs	r3, #9
 8002418:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	a903      	add	r1, sp, #12
 800241c:	4815      	ldr	r0, [pc, #84]	; (8002474 <HAL_CAN_MspInit+0x110>)
 800241e:	f7fe fc93 	bl	8000d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8002422:	462a      	mov	r2, r5
 8002424:	4621      	mov	r1, r4
 8002426:	2040      	movs	r0, #64	; 0x40
 8002428:	f7fe fc22 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800242c:	2040      	movs	r0, #64	; 0x40
 800242e:	f7fe fc53 	bl	8000cd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 2, 0);
 8002432:	462a      	mov	r2, r5
 8002434:	4621      	mov	r1, r4
 8002436:	2041      	movs	r0, #65	; 0x41
 8002438:	f7fe fc1a 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800243c:	2041      	movs	r0, #65	; 0x41
 800243e:	f7fe fc4b 	bl	8000cd8 <HAL_NVIC_EnableIRQ>
}
 8002442:	e798      	b.n	8002376 <HAL_CAN_MspInit+0x12>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_CAN_MspInit+0x10c>)
 800244a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	9302      	str	r3, [sp, #8]
 800245a:	9b02      	ldr	r3, [sp, #8]
 800245c:	e7d2      	b.n	8002404 <HAL_CAN_MspInit+0xa0>
 800245e:	bf00      	nop
 8002460:	40006400 	.word	0x40006400
 8002464:	40006800 	.word	0x40006800
 8002468:	200000dc 	.word	0x200000dc
 800246c:	40020000 	.word	0x40020000
 8002470:	40023800 	.word	0x40023800
 8002474:	40020400 	.word	0x40020400

08002478 <CAN_transmit>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_transmit(uint8_t dataTx1[], uint8_t dataTx2[], uint8_t dataTx3[], uint8_t dataTx4[], uint8_t dataTx5[]){
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b087      	sub	sp, #28
 800247c:	4605      	mov	r5, r0
 800247e:	460c      	mov	r4, r1
 8002480:	4617      	mov	r7, r2
 8002482:	461e      	mov	r6, r3
	.DLC = 8
  };

  uint32_t mailbox1, mailbox2, mailbox3, mailbox4, mailbox5;

  while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {};
 8002484:	4825      	ldr	r0, [pc, #148]	; (800251c <CAN_transmit+0xa4>)
 8002486:	f7fe f9d8 	bl	800083a <HAL_CAN_GetTxMailboxesFreeLevel>
 800248a:	2800      	cmp	r0, #0
 800248c:	d0fa      	beq.n	8002484 <CAN_transmit+0xc>
  HAL_CAN_AddTxMessage(&hcan1, &txMsgFRightF, dataTx1, &mailbox1);
 800248e:	ab05      	add	r3, sp, #20
 8002490:	462a      	mov	r2, r5
 8002492:	4923      	ldr	r1, [pc, #140]	; (8002520 <CAN_transmit+0xa8>)
 8002494:	4821      	ldr	r0, [pc, #132]	; (800251c <CAN_transmit+0xa4>)
 8002496:	f7fe f955 	bl	8000744 <HAL_CAN_AddTxMessage>
  while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {};
 800249a:	4820      	ldr	r0, [pc, #128]	; (800251c <CAN_transmit+0xa4>)
 800249c:	f7fe f9cd 	bl	800083a <HAL_CAN_GetTxMailboxesFreeLevel>
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d0fa      	beq.n	800249a <CAN_transmit+0x22>
  HAL_CAN_AddTxMessage(&hcan1, &txMsgFLeftF, dataTx2, &mailbox2);
 80024a4:	ab04      	add	r3, sp, #16
 80024a6:	4622      	mov	r2, r4
 80024a8:	491e      	ldr	r1, [pc, #120]	; (8002524 <CAN_transmit+0xac>)
 80024aa:	481c      	ldr	r0, [pc, #112]	; (800251c <CAN_transmit+0xa4>)
 80024ac:	f7fe f94a 	bl	8000744 <HAL_CAN_AddTxMessage>
  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {};
 80024b0:	481a      	ldr	r0, [pc, #104]	; (800251c <CAN_transmit+0xa4>)
 80024b2:	f7fe f9c2 	bl	800083a <HAL_CAN_GetTxMailboxesFreeLevel>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0fa      	beq.n	80024b0 <CAN_transmit+0x38>
  HAL_CAN_AddTxMessage(&hcan1, &txMsgStrainGauge, dataTx5, &mailbox5);
 80024ba:	ab01      	add	r3, sp, #4
 80024bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80024be:	491a      	ldr	r1, [pc, #104]	; (8002528 <CAN_transmit+0xb0>)
 80024c0:	4816      	ldr	r0, [pc, #88]	; (800251c <CAN_transmit+0xa4>)
 80024c2:	f7fe f93f 	bl	8000744 <HAL_CAN_AddTxMessage>
  if(count==99){
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <CAN_transmit+0xb4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b63      	cmp	r3, #99	; 0x63
 80024cc:	d00a      	beq.n	80024e4 <CAN_transmit+0x6c>
    while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {};
    HAL_CAN_AddTxMessage(&hcan1, &txMsgFRightS, dataTx3, &mailbox3);
    while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {};
    HAL_CAN_AddTxMessage(&hcan1, &txMsgFLeftS, dataTx4, &mailbox4);
  }
  count++;
 80024ce:	4a17      	ldr	r2, [pc, #92]	; (800252c <CAN_transmit+0xb4>)
 80024d0:	6853      	ldr	r3, [r2, #4]
 80024d2:	3301      	adds	r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80024d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024da:	4815      	ldr	r0, [pc, #84]	; (8002530 <CAN_transmit+0xb8>)
 80024dc:	f7fe fd1a 	bl	8000f14 <HAL_GPIO_TogglePin>
    HAL_CAN_AddTxMessage(&hcan1, &txMsgRLeftS, dataTx4, &mailbox4);
  }
  count++;
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
#endif
}
 80024e0:	b007      	add	sp, #28
 80024e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    count = -1;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <CAN_transmit+0xb4>)
 80024e6:	f04f 32ff 	mov.w	r2, #4294967295
 80024ea:	605a      	str	r2, [r3, #4]
    while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {};
 80024ec:	480b      	ldr	r0, [pc, #44]	; (800251c <CAN_transmit+0xa4>)
 80024ee:	f7fe f9a4 	bl	800083a <HAL_CAN_GetTxMailboxesFreeLevel>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d0fa      	beq.n	80024ec <CAN_transmit+0x74>
    HAL_CAN_AddTxMessage(&hcan1, &txMsgFRightS, dataTx3, &mailbox3);
 80024f6:	ab03      	add	r3, sp, #12
 80024f8:	463a      	mov	r2, r7
 80024fa:	490e      	ldr	r1, [pc, #56]	; (8002534 <CAN_transmit+0xbc>)
 80024fc:	4807      	ldr	r0, [pc, #28]	; (800251c <CAN_transmit+0xa4>)
 80024fe:	f7fe f921 	bl	8000744 <HAL_CAN_AddTxMessage>
    while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {};
 8002502:	4806      	ldr	r0, [pc, #24]	; (800251c <CAN_transmit+0xa4>)
 8002504:	f7fe f999 	bl	800083a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002508:	2800      	cmp	r0, #0
 800250a:	d0fa      	beq.n	8002502 <CAN_transmit+0x8a>
    HAL_CAN_AddTxMessage(&hcan1, &txMsgFLeftS, dataTx4, &mailbox4);
 800250c:	ab02      	add	r3, sp, #8
 800250e:	4632      	mov	r2, r6
 8002510:	4909      	ldr	r1, [pc, #36]	; (8002538 <CAN_transmit+0xc0>)
 8002512:	4802      	ldr	r0, [pc, #8]	; (800251c <CAN_transmit+0xa4>)
 8002514:	f7fe f916 	bl	8000744 <HAL_CAN_AddTxMessage>
 8002518:	e7d9      	b.n	80024ce <CAN_transmit+0x56>
 800251a:	bf00      	nop
 800251c:	2000014c 	.word	0x2000014c
 8002520:	20000008 	.word	0x20000008
 8002524:	20000020 	.word	0x20000020
 8002528:	20000038 	.word	0x20000038
 800252c:	200000dc 	.word	0x200000dc
 8002530:	40020000 	.word	0x40020000
 8002534:	20000050 	.word	0x20000050
 8002538:	20000068 	.word	0x20000068

0800253c <CAN_updateStatus>:

// Function that transmits a separate CAN msg that contains the status of AnaCAN
void CAN_updateStatus(void){
 800253c:	b500      	push	{lr}
 800253e:	b08b      	sub	sp, #44	; 0x2c
	CAN_TxHeaderTypeDef txMsg_status = {.StdId = 0x242,
 8002540:	2300      	movs	r3, #0
 8002542:	9305      	str	r3, [sp, #20]
 8002544:	9306      	str	r3, [sp, #24]
 8002546:	9307      	str	r3, [sp, #28]
 8002548:	9309      	str	r3, [sp, #36]	; 0x24
 800254a:	f240 2242 	movw	r2, #578	; 0x242
 800254e:	9204      	str	r2, [sp, #16]
 8002550:	2204      	movs	r2, #4
 8002552:	9208      	str	r2, [sp, #32]
		.RTR = CAN_RTR_DATA,
		.DLC = 4
	};

	uint32_t mailbox;
	uint8_t data[8] = {
 8002554:	9302      	str	r3, [sp, #8]
		[0] = AN.state,
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <CAN_updateStatus+0x58>)
 8002558:	781a      	ldrb	r2, [r3, #0]
	uint8_t data[8] = {
 800255a:	f88d 2004 	strb.w	r2, [sp, #4]
		[1] = AN.errorBits.can1Fail,
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	f3c3 0200 	ubfx	r2, r3, #0, #1
	uint8_t data[8] = {
 8002564:	f88d 2005 	strb.w	r2, [sp, #5]
		[2] = AN.errorBits.can2Fail,
 8002568:	f3c3 0240 	ubfx	r2, r3, #1, #1
	uint8_t data[8] = {
 800256c:	f88d 2006 	strb.w	r2, [sp, #6]
		[3] = AN.errorBits.spiFail,
 8002570:	f3c3 0380 	ubfx	r3, r3, #2, #1
	uint8_t data[8] = {
 8002574:	f88d 3007 	strb.w	r3, [sp, #7]
	};
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {};
 8002578:	4807      	ldr	r0, [pc, #28]	; (8002598 <CAN_updateStatus+0x5c>)
 800257a:	f7fe f95e 	bl	800083a <HAL_CAN_GetTxMailboxesFreeLevel>
 800257e:	2800      	cmp	r0, #0
 8002580:	d0fa      	beq.n	8002578 <CAN_updateStatus+0x3c>
	HAL_CAN_AddTxMessage(&hcan1, &txMsg_status, data, &mailbox);
 8002582:	ab03      	add	r3, sp, #12
 8002584:	aa01      	add	r2, sp, #4
 8002586:	a904      	add	r1, sp, #16
 8002588:	4803      	ldr	r0, [pc, #12]	; (8002598 <CAN_updateStatus+0x5c>)
 800258a:	f7fe f8db 	bl	8000744 <HAL_CAN_AddTxMessage>
}
 800258e:	b00b      	add	sp, #44	; 0x2c
 8002590:	f85d fb04 	ldr.w	pc, [sp], #4
 8002594:	2000011c 	.word	0x2000011c
 8002598:	2000014c 	.word	0x2000014c

0800259c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	4604      	mov	r4, r0
  static CAN_RxHeaderTypeDef hdr = {
    .IDE = CAN_ID_STD,
		.RTR = CAN_RTR_DATA,
		.DLC = 8
	};
  CAN_TxHeaderTypeDef txMsg = {
 80025a2:	2300      	movs	r3, #0
 80025a4:	9302      	str	r3, [sp, #8]
 80025a6:	9303      	str	r3, [sp, #12]
 80025a8:	9304      	str	r3, [sp, #16]
 80025aa:	9305      	str	r3, [sp, #20]
 80025ac:	9306      	str	r3, [sp, #24]
 80025ae:	9307      	str	r3, [sp, #28]
    .IDE = CAN_ID_STD,
    .RTR = CAN_RTR_DATA,
  };
  uint32_t mailbox;
	static uint8_t dataRx[8] = {0};
	if (hcan == &hcan2) {
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80025b2:	4298      	cmp	r0, r3
 80025b4:	d004      	beq.n	80025c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &hdr, dataRx);
	  txMsg.StdId = hdr.StdId;
	  txMsg.DLC = hdr.DLC;
	  HAL_CAN_AddTxMessage(&hcan1, &txMsg, dataRx, &mailbox);
	}
  if (hcan == &hcan1) {
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80025b8:	429c      	cmp	r4, r3
 80025ba:	d016      	beq.n	80025ea <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &hdr, dataRx);
    txMsg.StdId = hdr.StdId;
    txMsg.DLC = hdr.DLC;
    HAL_CAN_AddTxMessage(&hcan2, &txMsg, dataRx, &mailbox);
  }
}
 80025bc:	b008      	add	sp, #32
 80025be:	bd70      	pop	{r4, r5, r6, pc}
	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &hdr, dataRx);
 80025c0:	4e16      	ldr	r6, [pc, #88]	; (800261c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80025c2:	4d17      	ldr	r5, [pc, #92]	; (8002620 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80025c4:	4633      	mov	r3, r6
 80025c6:	f105 0278 	add.w	r2, r5, #120	; 0x78
 80025ca:	2100      	movs	r1, #0
 80025cc:	4811      	ldr	r0, [pc, #68]	; (8002614 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80025ce:	f7fe f951 	bl	8000874 <HAL_CAN_GetRxMessage>
	  txMsg.StdId = hdr.StdId;
 80025d2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80025d4:	9302      	str	r3, [sp, #8]
	  txMsg.DLC = hdr.DLC;
 80025d6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80025da:	9306      	str	r3, [sp, #24]
	  HAL_CAN_AddTxMessage(&hcan1, &txMsg, dataRx, &mailbox);
 80025dc:	ab01      	add	r3, sp, #4
 80025de:	4632      	mov	r2, r6
 80025e0:	a902      	add	r1, sp, #8
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80025e4:	f7fe f8ae 	bl	8000744 <HAL_CAN_AddTxMessage>
 80025e8:	e7e5      	b.n	80025b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &hdr, dataRx);
 80025ea:	4d0c      	ldr	r5, [pc, #48]	; (800261c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80025ec:	4c0c      	ldr	r4, [pc, #48]	; (8002620 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80025ee:	462b      	mov	r3, r5
 80025f0:	f104 0278 	add.w	r2, r4, #120	; 0x78
 80025f4:	2100      	movs	r1, #0
 80025f6:	4808      	ldr	r0, [pc, #32]	; (8002618 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80025f8:	f7fe f93c 	bl	8000874 <HAL_CAN_GetRxMessage>
    txMsg.StdId = hdr.StdId;
 80025fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80025fe:	9302      	str	r3, [sp, #8]
    txMsg.DLC = hdr.DLC;
 8002600:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002604:	9306      	str	r3, [sp, #24]
    HAL_CAN_AddTxMessage(&hcan2, &txMsg, dataRx, &mailbox);
 8002606:	ab01      	add	r3, sp, #4
 8002608:	462a      	mov	r2, r5
 800260a:	a902      	add	r1, sp, #8
 800260c:	4801      	ldr	r0, [pc, #4]	; (8002614 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800260e:	f7fe f899 	bl	8000744 <HAL_CAN_AddTxMessage>
}
 8002612:	e7d3      	b.n	80025bc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
 8002614:	20000124 	.word	0x20000124
 8002618:	2000014c 	.word	0x2000014c
 800261c:	200000e4 	.word	0x200000e4
 8002620:	20000008 	.word	0x20000008

08002624 <LP_Filter>:
	filter->samplingTime = samplingTime; //s
	filter->prevInput = 0;
}

float LP_Filter(LPFilter * filter, float input, float samplingTime) {
	filter->samplingTime = samplingTime;
 8002624:	edc0 0a00 	vstr	s1, [r0]
	filter->a = 1/(1 + filter->freq * filter->samplingTime);
 8002628:	ed90 7a01 	vldr	s14, [r0, #4]
 800262c:	ee67 0a20 	vmul.f32	s1, s14, s1
 8002630:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002634:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002638:	eec7 6aa0 	vdiv.f32	s13, s15, s1
 800263c:	edc0 6a02 	vstr	s13, [r0, #8]
	float out = filter->prevInput * filter->a + input * (1-filter->a);
 8002640:	ed90 7a03 	vldr	s14, [r0, #12]
 8002644:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002648:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800264c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002650:	ee37 0a27 	vadd.f32	s0, s14, s15
	filter->prevInput = out;
 8002654:	ed80 0a03 	vstr	s0, [r0, #12]
	return out;
}
 8002658:	4770      	bx	lr
	...

0800265c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800265c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002660:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002662:	2400      	movs	r4, #0
 8002664:	9401      	str	r4, [sp, #4]
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <MX_GPIO_Init+0xdc>)
 8002668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
 8002670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002672:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002676:	9201      	str	r2, [sp, #4]
 8002678:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	9402      	str	r4, [sp, #8]
 800267c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
 8002684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002686:	f002 0201 	and.w	r2, r2, #1
 800268a:	9202      	str	r2, [sp, #8]
 800268c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	9403      	str	r4, [sp, #12]
 8002690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002692:	f042 0202 	orr.w	r2, r2, #2
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
 8002698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269a:	f002 0202 	and.w	r2, r2, #2
 800269e:	9203      	str	r2, [sp, #12]
 80026a0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a2:	9404      	str	r4, [sp, #16]
 80026a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a6:	f042 0204 	orr.w	r2, r2, #4
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	9304      	str	r3, [sp, #16]
 80026b4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_9, GPIO_PIN_RESET);
 80026b6:	4e21      	ldr	r6, [pc, #132]	; (800273c <MX_GPIO_Init+0xe0>)
 80026b8:	4622      	mov	r2, r4
 80026ba:	f44f 7101 	mov.w	r1, #516	; 0x204
 80026be:	4630      	mov	r0, r6
 80026c0:	f7fe fc22 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80026c4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002748 <MX_GPIO_Init+0xec>
 80026c8:	4622      	mov	r2, r4
 80026ca:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80026ce:	4640      	mov	r0, r8
 80026d0:	f7fe fc1a 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80026d4:	4f1a      	ldr	r7, [pc, #104]	; (8002740 <MX_GPIO_Init+0xe4>)
 80026d6:	4622      	mov	r2, r4
 80026d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80026dc:	4638      	mov	r0, r7
 80026de:	f7fe fc13 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026e2:	2302      	movs	r3, #2
 80026e4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <MX_GPIO_Init+0xe8>)
 80026e8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ec:	a905      	add	r1, sp, #20
 80026ee:	4630      	mov	r0, r6
 80026f0:	f7fe fb2a 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 80026f4:	f44f 7301 	mov.w	r3, #516	; 0x204
 80026f8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fa:	2501      	movs	r5, #1
 80026fc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	a905      	add	r1, sp, #20
 8002704:	4630      	mov	r0, r6
 8002706:	f7fe fb1f 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800270a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800270e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002710:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	a905      	add	r1, sp, #20
 8002718:	4640      	mov	r0, r8
 800271a:	f7fe fb15 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800271e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002722:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	a905      	add	r1, sp, #20
 800272c:	4638      	mov	r0, r7
 800272e:	f7fe fb0b 	bl	8000d48 <HAL_GPIO_Init>

}
 8002732:	b00a      	add	sp, #40	; 0x28
 8002734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	40020400 	.word	0x40020400
 8002740:	40020000 	.word	0x40020000
 8002744:	10110000 	.word	0x10110000
 8002748:	40020800 	.word	0x40020800

0800274c <AN_wheelConversion>:
#endif
  }
  AN_speedL = AN_speedArrayL[j];
  AN_speedR = AN_speedArrayR[i];
#else
  if(AN_counterL==AN_ZERO_SPEED){
 800274c:	4b3f      	ldr	r3, [pc, #252]	; (800284c <AN_wheelConversion+0x100>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <AN_wheelConversion+0x104>)
 8002752:	429a      	cmp	r2, r3
 8002754:	d064      	beq.n	8002820 <AN_wheelConversion+0xd4>
    AN_speedL=0;
  }else{
#if FRONT
    AN_speedL = AN_SPEED_CONVERSION_MS((AN_counterL+9), FRONT_WHEEL_SLITS);
 8002756:	4a3d      	ldr	r2, [pc, #244]	; (800284c <AN_wheelConversion+0x100>)
 8002758:	6813      	ldr	r3, [r2, #0]
 800275a:	3309      	adds	r3, #9
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002764:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002854 <AN_wheelConversion+0x108>
 8002768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800276c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002858 <AN_wheelConversion+0x10c>
 8002770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002774:	eddf 6a39 	vldr	s13, [pc, #228]	; 800285c <AN_wheelConversion+0x110>
 8002778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800277c:	ed82 7a01 	vstr	s14, [r2, #4]
#else
    AN_speedL = AN_SPEED_CONVERSION_MS((AN_counterL+9), REAR_WHEEL_SLITS);
#endif
  }
  if(AN_counterR==AN_ZERO_SPEED){
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <AN_wheelConversion+0x100>)
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	4b32      	ldr	r3, [pc, #200]	; (8002850 <AN_wheelConversion+0x104>)
 8002786:	429a      	cmp	r2, r3
 8002788:	d04e      	beq.n	8002828 <AN_wheelConversion+0xdc>
    AN_speedR=0;
  }else{
#if FRONT
    AN_speedR = AN_SPEED_CONVERSION_MS((AN_counterR+9), FRONT_WHEEL_SLITS);
 800278a:	4a30      	ldr	r2, [pc, #192]	; (800284c <AN_wheelConversion+0x100>)
 800278c:	6893      	ldr	r3, [r2, #8]
 800278e:	3309      	adds	r3, #9
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002798:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002854 <AN_wheelConversion+0x108>
 800279c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002858 <AN_wheelConversion+0x10c>
 80027a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800285c <AN_wheelConversion+0x110>
 80027ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b0:	ed82 7a03 	vstr	s14, [r2, #12]
#endif

/*
 * If else check in the case that any of the wheels rotate >40m/s
 */
if(AN_speedL > 40.0){
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <AN_wheelConversion+0x100>)
 80027b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80027ba:	eddf 7a29 	vldr	s15, [pc, #164]	; 8002860 <AN_wheelConversion+0x114>
 80027be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	dd33      	ble.n	8002830 <AN_wheelConversion+0xe4>
  AN_speedL=40;
 80027c8:	edc3 7a01 	vstr	s15, [r3, #4]
}else if(AN_speedR>40.0){
  AN_speedR=40;
}
  AN_speedLCoded=(AN_speedL*0xFFFF)/40;
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <AN_wheelConversion+0x100>)
 80027ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80027d2:	eddf 5a24 	vldr	s11, [pc, #144]	; 8002864 <AN_wheelConversion+0x118>
 80027d6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80027da:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8002860 <AN_wheelConversion+0x114>
 80027de:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e6:	ee17 2a90 	vmov	r2, s15
 80027ea:	b292      	uxth	r2, r2
 80027ec:	821a      	strh	r2, [r3, #16]
  AN_speedRCoded=(AN_speedR*0xFFFF)/40;
 80027ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80027f2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80027f6:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80027fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fe:	ee17 2a90 	vmov	r2, s15
 8002802:	b292      	uxth	r2, r2
 8002804:	825a      	strh	r2, [r3, #18]
  *dataTx1=AN_speedRCoded>>8;
 8002806:	8a5a      	ldrh	r2, [r3, #18]
 8002808:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800280c:	7002      	strb	r2, [r0, #0]
  *(dataTx1+1)=AN_speedRCoded&0xFF;
 800280e:	8a5a      	ldrh	r2, [r3, #18]
 8002810:	7042      	strb	r2, [r0, #1]
  *dataTx2=AN_speedLCoded>>8;
 8002812:	8a1a      	ldrh	r2, [r3, #16]
 8002814:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002818:	700a      	strb	r2, [r1, #0]
  *(dataTx2+1)=AN_speedLCoded&0xFF;
 800281a:	8a1b      	ldrh	r3, [r3, #16]
 800281c:	704b      	strb	r3, [r1, #1]
}
 800281e:	4770      	bx	lr
    AN_speedL=0;
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <AN_wheelConversion+0x100>)
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	e7ab      	b.n	8002780 <AN_wheelConversion+0x34>
    AN_speedR=0;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <AN_wheelConversion+0x100>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	e7c1      	b.n	80027b4 <AN_wheelConversion+0x68>
}else if(AN_speedR>40.0){
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <AN_wheelConversion+0x100>)
 8002832:	ed93 7a03 	vldr	s14, [r3, #12]
 8002836:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8002860 <AN_wheelConversion+0x114>
 800283a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	ddc3      	ble.n	80027cc <AN_wheelConversion+0x80>
  AN_speedR=40;
 8002844:	edc3 7a03 	vstr	s15, [r3, #12]
 8002848:	e7c0      	b.n	80027cc <AN_wheelConversion+0x80>
 800284a:	bf00      	nop
 800284c:	200000fc 	.word	0x200000fc
 8002850:	004c4b40 	.word	0x004c4b40
 8002854:	3456bf95 	.word	0x3456bf95
 8002858:	42700000 	.word	0x42700000
 800285c:	3fb7d9de 	.word	0x3fb7d9de
 8002860:	42200000 	.word	0x42200000
 8002864:	477fff00 	.word	0x477fff00

08002868 <AN_sometingWongState>:
 * This function is called when AnaCAN is in the SOMETINGWONG state. This only occurs
 * when one of the critical peripherals malfunctions. Proceeds to try and re-initialize
 * the peripheral that malfunctioned and sets AnaCAN state afterwards. If successful in
 * re-initialization, AnaCAN state is set to NOMINAL and SOMETINGWONG otherwise.
 */
static anacan_state AN_sometingWongState(){
 8002868:	b508      	push	{r3, lr}
  if(AN.errorBits.can1Fail){
 800286a:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <AN_sometingWongState+0x60>)
 800286c:	785b      	ldrb	r3, [r3, #1]
 800286e:	f013 0f01 	tst.w	r3, #1
 8002872:	d10d      	bne.n	8002890 <AN_sometingWongState+0x28>
    MX_CAN1_Init();
    HAL_CAN_Start(&hcan1);
    AN.errorBits.can1Fail=false;
  } else if(AN.errorBits.can2Fail){
 8002874:	f013 0f02 	tst.w	r3, #2
 8002878:	d11b      	bne.n	80028b2 <AN_sometingWongState+0x4a>
    MX_CAN2_Init();
    HAL_CAN_Start(&hcan2);
    AN.errorBits.can2Fail=false;
  } else if(AN.errorBits.spiFail){
 800287a:	f013 0f04 	tst.w	r3, #4
 800287e:	d011      	beq.n	80028a4 <AN_sometingWongState+0x3c>
    MX_SPI1_Init();
 8002880:	f000 fa16 	bl	8002cb0 <MX_SPI1_Init>
    AN.errorBits.spiFail=false;
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <AN_sometingWongState+0x60>)
 8002886:	785a      	ldrb	r2, [r3, #1]
 8002888:	f36f 0282 	bfc	r2, #2, #1
 800288c:	705a      	strb	r2, [r3, #1]
 800288e:	e009      	b.n	80028a4 <AN_sometingWongState+0x3c>
    MX_CAN1_Init();
 8002890:	f7ff fd1c 	bl	80022cc <MX_CAN1_Init>
    HAL_CAN_Start(&hcan1);
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <AN_sometingWongState+0x64>)
 8002896:	f7fd ff27 	bl	80006e8 <HAL_CAN_Start>
    AN.errorBits.can1Fail=false;
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <AN_sometingWongState+0x60>)
 800289c:	785a      	ldrb	r2, [r3, #1]
 800289e:	f36f 0200 	bfc	r2, #0, #1
 80028a2:	705a      	strb	r2, [r3, #1]
  }
  if(AN.errorBits.can1Fail||AN.errorBits.can2Fail||AN.errorBits.spiFail){
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <AN_sometingWongState+0x60>)
 80028a6:	7858      	ldrb	r0, [r3, #1]
 80028a8:	f010 0007 	ands.w	r0, r0, #7
 80028ac:	d000      	beq.n	80028b0 <AN_sometingWongState+0x48>
    return SOMETINGWONG;
 80028ae:	2001      	movs	r0, #1
  } else{
    return NOMINAL;
  }
}
 80028b0:	bd08      	pop	{r3, pc}
    MX_CAN2_Init();
 80028b2:	f7ff fd31 	bl	8002318 <MX_CAN2_Init>
    HAL_CAN_Start(&hcan2);
 80028b6:	4806      	ldr	r0, [pc, #24]	; (80028d0 <AN_sometingWongState+0x68>)
 80028b8:	f7fd ff16 	bl	80006e8 <HAL_CAN_Start>
    AN.errorBits.can2Fail=false;
 80028bc:	4b02      	ldr	r3, [pc, #8]	; (80028c8 <AN_sometingWongState+0x60>)
 80028be:	785a      	ldrb	r2, [r3, #1]
 80028c0:	f36f 0241 	bfc	r2, #1, #1
 80028c4:	705a      	strb	r2, [r3, #1]
 80028c6:	e7ed      	b.n	80028a4 <AN_sometingWongState+0x3c>
 80028c8:	2000011c 	.word	0x2000011c
 80028cc:	2000014c 	.word	0x2000014c
 80028d0:	20000124 	.word	0x20000124

080028d4 <AN_nominalState>:
static anacan_state AN_nominalState(){
 80028d4:	b510      	push	{r4, lr}
 80028d6:	b08c      	sub	sp, #48	; 0x30
  uint8_t dataTxRFast[8] ={0};
 80028d8:	2400      	movs	r4, #0
 80028da:	940a      	str	r4, [sp, #40]	; 0x28
 80028dc:	940b      	str	r4, [sp, #44]	; 0x2c
  uint8_t dataTxLFast[8] ={0};
 80028de:	9408      	str	r4, [sp, #32]
 80028e0:	9409      	str	r4, [sp, #36]	; 0x24
  uint8_t dataTxRSlow[8] ={0};
 80028e2:	9406      	str	r4, [sp, #24]
 80028e4:	9407      	str	r4, [sp, #28]
  uint8_t dataTxLSlow[8] ={0};
 80028e6:	9404      	str	r4, [sp, #16]
 80028e8:	9405      	str	r4, [sp, #20]
  uint8_t sentSGData[3] = {0};
 80028ea:	4b27      	ldr	r3, [pc, #156]	; (8002988 <AN_nominalState+0xb4>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80028f2:	f88d 400e 	strb.w	r4, [sp, #14]
  SPI_rFastPrepare(dataTxRFast);
 80028f6:	a80a      	add	r0, sp, #40	; 0x28
 80028f8:	f000 fade 	bl	8002eb8 <SPI_rFastPrepare>
  SPI_lFastPrepare(dataTxLFast);
 80028fc:	a808      	add	r0, sp, #32
 80028fe:	f000 fb19 	bl	8002f34 <SPI_lFastPrepare>
  AN_wheelConversion(dataTxRFast, dataTxLFast);
 8002902:	a908      	add	r1, sp, #32
 8002904:	a80a      	add	r0, sp, #40	; 0x28
 8002906:	f7ff ff21 	bl	800274c <AN_wheelConversion>
  uint32_t strainGaugeData = SPI_dataRead(0x42, 32);
 800290a:	2120      	movs	r1, #32
 800290c:	2042      	movs	r0, #66	; 0x42
 800290e:	f000 fc63 	bl	80031d8 <SPI_dataRead>
  sentSGData[0] = strainGaugeData & 0xFF0000;
 8002912:	f88d 400c 	strb.w	r4, [sp, #12]
  sentSGData[1] = strainGaugeData & 0x00FF00;
 8002916:	f88d 400d 	strb.w	r4, [sp, #13]
  sentSGData[2] = strainGaugeData & 0x00FF00;
 800291a:	f88d 400e 	strb.w	r4, [sp, #14]
  if(count==99){
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <AN_nominalState+0xb8>)
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b63      	cmp	r3, #99	; 0x63
 8002924:	d022      	beq.n	800296c <AN_nominalState+0x98>
  CAN_transmit(dataTxRFast, dataTxLFast, dataTxRSlow, dataTxLSlow, sentSGData);
 8002926:	ab03      	add	r3, sp, #12
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	ab04      	add	r3, sp, #16
 800292c:	aa06      	add	r2, sp, #24
 800292e:	a908      	add	r1, sp, #32
 8002930:	a80a      	add	r0, sp, #40	; 0x28
 8002932:	f7ff fda1 	bl	8002478 <CAN_transmit>
  count++;
 8002936:	4a15      	ldr	r2, [pc, #84]	; (800298c <AN_nominalState+0xb8>)
 8002938:	6953      	ldr	r3, [r2, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	6153      	str	r3, [r2, #20]
  AN_counter++;
 800293e:	4a14      	ldr	r2, [pc, #80]	; (8002990 <AN_nominalState+0xbc>)
 8002940:	6813      	ldr	r3, [r2, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	6013      	str	r3, [r2, #0]
  if(AN_counter%1000==0){
 8002946:	4913      	ldr	r1, [pc, #76]	; (8002994 <AN_nominalState+0xc0>)
 8002948:	fb81 2103 	smull	r2, r1, r1, r3
 800294c:	17da      	asrs	r2, r3, #31
 800294e:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
 8002952:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002956:	fb01 3212 	mls	r2, r1, r2, r3
 800295a:	b192      	cbz	r2, 8002982 <AN_nominalState+0xae>
  if(AN.errorBits.can1Fail||AN.errorBits.can2Fail||AN.errorBits.spiFail){
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <AN_nominalState+0xc4>)
 800295e:	7858      	ldrb	r0, [r3, #1]
 8002960:	f010 0007 	ands.w	r0, r0, #7
 8002964:	d000      	beq.n	8002968 <AN_nominalState+0x94>
    return SOMETINGWONG;
 8002966:	2001      	movs	r0, #1
}
 8002968:	b00c      	add	sp, #48	; 0x30
 800296a:	bd10      	pop	{r4, pc}
    count = -1;
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <AN_nominalState+0xb8>)
 800296e:	f04f 32ff 	mov.w	r2, #4294967295
 8002972:	615a      	str	r2, [r3, #20]
    SPI_rSlowPrepare(dataTxRSlow);
 8002974:	a806      	add	r0, sp, #24
 8002976:	f000 faf9 	bl	8002f6c <SPI_rSlowPrepare>
    SPI_lSlowPrepare(dataTxLSlow);
 800297a:	a804      	add	r0, sp, #16
 800297c:	f000 fb51 	bl	8003022 <SPI_lSlowPrepare>
 8002980:	e7d1      	b.n	8002926 <AN_nominalState+0x52>
    CAN_updateStatus();
 8002982:	f7ff fddb 	bl	800253c <CAN_updateStatus>
 8002986:	e7e9      	b.n	800295c <AN_nominalState+0x88>
 8002988:	08003704 	.word	0x08003704
 800298c:	200000fc 	.word	0x200000fc
 8002990:	20000174 	.word	0x20000174
 8002994:	10624dd3 	.word	0x10624dd3
 8002998:	2000011c 	.word	0x2000011c

0800299c <AN_peripheralStartup>:
void AN_peripheralStartup(){
 800299c:	b538      	push	{r3, r4, r5, lr}
  HAL_CAN_Start(&hcan1);
 800299e:	4d20      	ldr	r5, [pc, #128]	; (8002a20 <AN_peripheralStartup+0x84>)
 80029a0:	4628      	mov	r0, r5
 80029a2:	f7fd fea1 	bl	80006e8 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80029a6:	4c1f      	ldr	r4, [pc, #124]	; (8002a24 <AN_peripheralStartup+0x88>)
 80029a8:	4620      	mov	r0, r4
 80029aa:	f7fd fe9d 	bl	80006e8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80029ae:	2102      	movs	r1, #2
 80029b0:	4628      	mov	r0, r5
 80029b2:	f7fe f803 	bl	80009bc <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL);
 80029b6:	2104      	movs	r1, #4
 80029b8:	4628      	mov	r0, r5
 80029ba:	f7fd ffff 	bl	80009bc <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 80029be:	2110      	movs	r1, #16
 80029c0:	4628      	mov	r0, r5
 80029c2:	f7fd fffb 	bl	80009bc <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_FULL);
 80029c6:	2120      	movs	r1, #32
 80029c8:	4628      	mov	r0, r5
 80029ca:	f7fd fff7 	bl	80009bc <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80029ce:	2102      	movs	r1, #2
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fd fff3 	bl	80009bc <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_FULL);
 80029d6:	2104      	movs	r1, #4
 80029d8:	4620      	mov	r0, r4
 80029da:	f7fd ffef 	bl	80009bc <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 80029de:	2110      	movs	r1, #16
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7fd ffeb 	bl	80009bc <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_FULL);
 80029e6:	2120      	movs	r1, #32
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7fd ffe7 	bl	80009bc <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim4);
 80029ee:	480e      	ldr	r0, [pc, #56]	; (8002a28 <AN_peripheralStartup+0x8c>)
 80029f0:	f7ff f97e 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80029f4:	2201      	movs	r2, #1
 80029f6:	2110      	movs	r1, #16
 80029f8:	480c      	ldr	r0, [pc, #48]	; (8002a2c <AN_peripheralStartup+0x90>)
 80029fa:	f7fe fa85 	bl	8000f08 <HAL_GPIO_WritePin>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 80029fe:	4c0c      	ldr	r4, [pc, #48]	; (8002a30 <AN_peripheralStartup+0x94>)
 8002a00:	210c      	movs	r1, #12
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7ff fc08 	bl	8002218 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8002a08:	4d0a      	ldr	r5, [pc, #40]	; (8002a34 <AN_peripheralStartup+0x98>)
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f7ff fc03 	bl	8002218 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002a12:	4628      	mov	r0, r5
 8002a14:	f7ff f96c 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff f969 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
}
 8002a1e:	bd38      	pop	{r3, r4, r5, pc}
 8002a20:	2000014c 	.word	0x2000014c
 8002a24:	20000124 	.word	0x20000124
 8002a28:	20000228 	.word	0x20000228
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	20000264 	.word	0x20000264
 8002a34:	200002a0 	.word	0x200002a0

08002a38 <AN_executeState>:
/**
 * This function calls the corresponding function depending on the state of AnaCAN. If the state
 * is NOMINAL, this function calls AN_nominalState. If state is SOMETINGWONG, this function calls
 * AN_sometingWongState.
 */
void AN_executeState(){
 8002a38:	b510      	push	{r4, lr}
  } states[NUM_STATES] =
  {
    [NOMINAL] = {&AN_nominalState},
    [SOMETINGWONG] = {&AN_sometingWongState}
  };
  AN.state = (states[AN.state].process());
 8002a3a:	4c04      	ldr	r4, [pc, #16]	; (8002a4c <AN_executeState+0x14>)
 8002a3c:	7822      	ldrb	r2, [r4, #0]
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <AN_executeState+0x18>)
 8002a40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4798      	blx	r3
 8002a48:	7020      	strb	r0, [r4, #0]
}
 8002a4a:	bd10      	pop	{r4, pc}
 8002a4c:	2000011c 	.word	0x2000011c
 8002a50:	08003704 	.word	0x08003704

08002a54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	ed2d 8b02 	vpush	{d8}
  uint32_t filteredRearCnt = 0;
  uint32_t filteredFrontCnt = 0;
  if (htim == &htim4){
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a5c:	4298      	cmp	r0, r3
 8002a5e:	d008      	beq.n	8002a72 <HAL_TIM_PeriodElapsedCallback+0x1e>
      i=0;
    }
  }
  
#else
  else if (htim == &htim2)
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a62:	4298      	cmp	r0, r3
 8002a64:	d027      	beq.n	8002ab6 <HAL_TIM_PeriodElapsedCallback+0x62>
  {
  	AN_counterL = AN_ZERO_SPEED;
  }
  else if (htim == &htim5)
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a68:	4298      	cmp	r0, r3
 8002a6a:	d028      	beq.n	8002abe <HAL_TIM_PeriodElapsedCallback+0x6a>
  {
  	AN_counterR = AN_ZERO_SPEED;
  }
#endif
}
 8002a6c:	ecbd 8b02 	vpop	{d8}
 8002a70:	bd38      	pop	{r3, r4, r5, pc}
    AN_shouldExecuteSM = true;
 8002a72:	4c18      	ldr	r4, [pc, #96]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a74:	2301      	movs	r3, #1
 8002a76:	7623      	strb	r3, [r4, #24]
    filteredRearCnt = LP_Filter(&AN_rearFilter, AN_counterR, rearCnt*AN_TIMER_PERIOD);
 8002a78:	ed94 0a02 	vldr	s0, [r4, #8]
 8002a7c:	edd4 0a07 	vldr	s1, [r4, #28]
 8002a80:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8002a84:	ed9f 8a14 	vldr	s16, [pc, #80]	; 8002ad8 <HAL_TIM_PeriodElapsedCallback+0x84>
 8002a88:	4d14      	ldr	r5, [pc, #80]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002a8a:	ee60 0a88 	vmul.f32	s1, s1, s16
 8002a8e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8002a92:	4628      	mov	r0, r5
 8002a94:	f7ff fdc6 	bl	8002624 <LP_Filter>
    filteredFrontCnt = LP_Filter(&AN_frontFilter, AN_counterL, rearCnt*AN_TIMER_PERIOD);
 8002a98:	ed94 0a00 	vldr	s0, [r4]
 8002a9c:	edd4 0a07 	vldr	s1, [r4, #28]
 8002aa0:	eef8 0a60 	vcvt.f32.u32	s1, s1
 8002aa4:	ee60 0a88 	vmul.f32	s1, s1, s16
 8002aa8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8002aac:	f105 0010 	add.w	r0, r5, #16
 8002ab0:	f7ff fdb8 	bl	8002624 <LP_Filter>
 8002ab4:	e7da      	b.n	8002a6c <HAL_TIM_PeriodElapsedCallback+0x18>
  	AN_counterL = AN_ZERO_SPEED;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002ab8:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e7d6      	b.n	8002a6c <HAL_TIM_PeriodElapsedCallback+0x18>
  	AN_counterR = AN_ZERO_SPEED;
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002ac0:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	e7d2      	b.n	8002a6c <HAL_TIM_PeriodElapsedCallback+0x18>
 8002ac6:	bf00      	nop
 8002ac8:	20000228 	.word	0x20000228
 8002acc:	200002a0 	.word	0x200002a0
 8002ad0:	20000264 	.word	0x20000264
 8002ad4:	200000fc 	.word	0x200000fc
 8002ad8:	3456bf95 	.word	0x3456bf95
 8002adc:	2000009c 	.word	0x2000009c
 8002ae0:	004c4b40 	.word	0x004c4b40

08002ae4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim) {
	if (htim == &htim5){
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IC_CaptureCallback+0xe>
#else
	AN_counterR=__HAL_TIM_GET_COMPARE(&htim5, TIM_CHANNEL_4);
#endif
	__HAL_TIM_SET_COUNTER(&htim5, 0);
	}
	if (htim == &htim2){	//Front wheel
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0x30>)
 8002aec:	4298      	cmp	r0, r3
 8002aee:	d007      	beq.n	8002b00 <HAL_TIM_IC_CaptureCallback+0x1c>
#else
	AN_counterL=__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_3);
#endif
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	}
}
 8002af0:	4770      	bx	lr
	AN_counterR=__HAL_TIM_GET_COMPARE(&htim5, TIM_CHANNEL_4);
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002af6:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <HAL_TIM_IC_CaptureCallback+0x34>)
 8002af8:	6091      	str	r1, [r2, #8]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24
 8002afe:	e7f4      	b.n	8002aea <HAL_TIM_IC_CaptureCallback+0x6>
	AN_counterL=__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_3);
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_TIM_IC_CaptureCallback+0x34>)
 8002b06:	6011      	str	r1, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002b0c:	e7f0      	b.n	8002af0 <HAL_TIM_IC_CaptureCallback+0xc>
 8002b0e:	bf00      	nop
 8002b10:	20000264 	.word	0x20000264
 8002b14:	200002a0 	.word	0x200002a0
 8002b18:	200000fc 	.word	0x200000fc

08002b1c <_Error_Handler>:
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002b1c:	e7fe      	b.n	8002b1c <_Error_Handler>
	...

08002b20 <SystemClock_Config>:
{
 8002b20:	b500      	push	{lr}
 8002b22:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	2100      	movs	r1, #0
 8002b26:	9100      	str	r1, [sp, #0]
 8002b28:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <SystemClock_Config+0xc4>)
 8002b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b3c:	9101      	str	r1, [sp, #4]
 8002b3e:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <SystemClock_Config+0xc8>)
 8002b40:	6813      	ldr	r3, [r2, #0]
 8002b42:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	6813      	ldr	r3, [r2, #0]
 8002b4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002b56:	2309      	movs	r3, #9
 8002b58:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b60:	2301      	movs	r3, #1
 8002b62:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b64:	2302      	movs	r3, #2
 8002b66:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b6c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b6e:	2219      	movs	r2, #25
 8002b70:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002b72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b76:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b78:	2204      	movs	r2, #4
 8002b7a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b7c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b7e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b80:	a807      	add	r0, sp, #28
 8002b82:	f7fe fb0b 	bl	800119c <HAL_RCC_OscConfig>
 8002b86:	bb20      	cbnz	r0, 8002bd2 <SystemClock_Config+0xb2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b88:	230f      	movs	r3, #15
 8002b8a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b98:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ba0:	2103      	movs	r1, #3
 8002ba2:	a802      	add	r0, sp, #8
 8002ba4:	f7fe f9ba 	bl	8000f1c <HAL_RCC_ClockConfig>
 8002ba8:	b9b8      	cbnz	r0, 8002bda <SystemClock_Config+0xba>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002baa:	f7fe fa65 	bl	8001078 <HAL_RCC_GetHCLKFreq>
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <SystemClock_Config+0xcc>)
 8002bb0:	fba3 3000 	umull	r3, r0, r3, r0
 8002bb4:	0980      	lsrs	r0, r0, #6
 8002bb6:	f7fe f89b 	bl	8000cf0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002bba:	2004      	movs	r0, #4
 8002bbc:	f7fe f8ae 	bl	8000d1c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f7fe f852 	bl	8000c70 <HAL_NVIC_SetPriority>
}
 8002bcc:	b015      	add	sp, #84	; 0x54
 8002bce:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002bd2:	21e8      	movs	r1, #232	; 0xe8
 8002bd4:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <SystemClock_Config+0xd0>)
 8002bd6:	f7ff ffa1 	bl	8002b1c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002bda:	21f6      	movs	r1, #246	; 0xf6
 8002bdc:	4804      	ldr	r0, [pc, #16]	; (8002bf0 <SystemClock_Config+0xd0>)
 8002bde:	f7ff ff9d 	bl	8002b1c <_Error_Handler>
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40007000 	.word	0x40007000
 8002bec:	10624dd3 	.word	0x10624dd3
 8002bf0:	08003738 	.word	0x08003738

08002bf4 <main>:
{
 8002bf4:	b508      	push	{r3, lr}
  AN.state = NOMINAL;
 8002bf6:	2400      	movs	r4, #0
 8002bf8:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <main+0xa8>)
 8002bfa:	701c      	strb	r4, [r3, #0]
  HAL_Init();
 8002bfc:	f7fd fca2 	bl	8000544 <HAL_Init>
  SystemClock_Config();
 8002c00:	f7ff ff8e 	bl	8002b20 <SystemClock_Config>
  MX_GPIO_Init();
 8002c04:	f7ff fd2a 	bl	800265c <MX_GPIO_Init>
  MX_CAN1_Init();
 8002c08:	f7ff fb60 	bl	80022cc <MX_CAN1_Init>
  MX_CAN2_Init();
 8002c0c:	f7ff fb84 	bl	8002318 <MX_CAN2_Init>
  MX_SPI1_Init();
 8002c10:	f000 f84e 	bl	8002cb0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002c14:	f000 f872 	bl	8002cfc <MX_SPI3_Init>
  MX_TIM2_Init();
 8002c18:	f000 fbc2 	bl	80033a0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002c1c:	f000 fc36 	bl	800348c <MX_TIM5_Init>
  MX_TIM4_Init();
 8002c20:	f000 fbfc 	bl	800341c <MX_TIM4_Init>
  MX_TIM14_Init();
 8002c24:	f000 fc70 	bl	8003508 <MX_TIM14_Init>
  MX_SPI3_Init();
 8002c28:	f000 f868 	bl	8002cfc <MX_SPI3_Init>
  AN_peripheralStartup();
 8002c2c:	f7ff feb6 	bl	800299c <AN_peripheralStartup>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c36:	481a      	ldr	r0, [pc, #104]	; (8002ca0 <main+0xac>)
 8002c38:	f7fe f966 	bl	8000f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2104      	movs	r1, #4
 8002c40:	4818      	ldr	r0, [pc, #96]	; (8002ca4 <main+0xb0>)
 8002c42:	f7fe f961 	bl	8000f08 <HAL_GPIO_WritePin>
  HAL_CAN_Start(&hcan1);
 8002c46:	4818      	ldr	r0, [pc, #96]	; (8002ca8 <main+0xb4>)
 8002c48:	f7fd fd4e 	bl	80006e8 <HAL_CAN_Start>
  SPI_commRegisterTrue(); // verifies SPI lines are functioning
 8002c4c:	f000 fa66 	bl	800311c <SPI_commRegisterTrue>
  SPI_write16(0x01, ADC_CONTROL_COMMAND); // ADC_Control_Register
 8002c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c54:	2001      	movs	r0, #1
 8002c56:	f000 fa6f 	bl	8003138 <SPI_write16>
  SPI_write16(0x09, 0x00); // Writes to differential channel 0
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	2009      	movs	r0, #9
 8002c5e:	f000 fa6b 	bl	8003138 <SPI_write16>
  SPI_write16(0x19, CONFIG_COMMAND); // Configures ADC gain
 8002c62:	2115      	movs	r1, #21
 8002c64:	2019      	movs	r0, #25
 8002c66:	f000 fa67 	bl	8003138 <SPI_write16>
  SPI_write24(0x21, FILTER_COMMAND); // Sets filter and output data rate
 8002c6a:	f240 7184 	movw	r1, #1924	; 0x784
 8002c6e:	2021      	movs	r0, #33	; 0x21
 8002c70:	f000 fa88 	bl	8003184 <SPI_write24>
  SPI_write16(0x04, VBIAS_COMMAND); // Sets voltage bias
 8002c74:	4621      	mov	r1, r4
 8002c76:	2004      	movs	r0, #4
 8002c78:	f000 fa5e 	bl	8003138 <SPI_write16>
  SPI_write16(0x09, 0x8001); // Enables differential channel 0
 8002c7c:	f248 0101 	movw	r1, #32769	; 0x8001
 8002c80:	2009      	movs	r0, #9
 8002c82:	f000 fa59 	bl	8003138 <SPI_write16>
 8002c86:	e004      	b.n	8002c92 <main+0x9e>
      AN_executeState();
 8002c88:	f7ff fed6 	bl	8002a38 <AN_executeState>
      AN_shouldExecuteSM = false;
 8002c8c:	4b07      	ldr	r3, [pc, #28]	; (8002cac <main+0xb8>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	761a      	strb	r2, [r3, #24]
    if (AN_shouldExecuteSM){
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <main+0xb8>)
 8002c94:	7e1b      	ldrb	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0fb      	beq.n	8002c92 <main+0x9e>
 8002c9a:	e7f5      	b.n	8002c88 <main+0x94>
 8002c9c:	2000011c 	.word	0x2000011c
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	2000014c 	.word	0x2000014c
 8002cac:	200000fc 	.word	0x200000fc

08002cb0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cb0:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8002cb2:	480f      	ldr	r0, [pc, #60]	; (8002cf0 <MX_SPI1_Init+0x40>)
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <MX_SPI1_Init+0x44>)
 8002cb6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cb8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002cbc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cc2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ccc:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002cce:	2238      	movs	r2, #56	; 0x38
 8002cd0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cd2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cd4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cd8:	230a      	movs	r3, #10
 8002cda:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cdc:	f7fe fca1 	bl	8001622 <HAL_SPI_Init>
 8002ce0:	b900      	cbnz	r0, 8002ce4 <MX_SPI1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002ce2:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002ce4:	215e      	movs	r1, #94	; 0x5e
 8002ce6:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <MX_SPI1_Init+0x48>)
 8002ce8:	f7ff ff18 	bl	8002b1c <_Error_Handler>
}
 8002cec:	e7f9      	b.n	8002ce2 <MX_SPI1_Init+0x32>
 8002cee:	bf00      	nop
 8002cf0:	200001d0 	.word	0x200001d0
 8002cf4:	40013000 	.word	0x40013000
 8002cf8:	08003748 	.word	0x08003748

08002cfc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002cfc:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8002cfe:	4810      	ldr	r0, [pc, #64]	; (8002d40 <MX_SPI3_Init+0x44>)
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <MX_SPI3_Init+0x48>)
 8002d02:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002d08:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d0e:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002d10:	2202      	movs	r2, #2
 8002d12:	6102      	str	r2, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d14:	2201      	movs	r2, #1
 8002d16:	6142      	str	r2, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d1e:	2228      	movs	r2, #40	; 0x28
 8002d20:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d22:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d24:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d26:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002d28:	230a      	movs	r3, #10
 8002d2a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002d2c:	f7fe fc79 	bl	8001622 <HAL_SPI_Init>
 8002d30:	b900      	cbnz	r0, 8002d34 <MX_SPI3_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002d32:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002d34:	2174      	movs	r1, #116	; 0x74
 8002d36:	4804      	ldr	r0, [pc, #16]	; (8002d48 <MX_SPI3_Init+0x4c>)
 8002d38:	f7ff fef0 	bl	8002b1c <_Error_Handler>
}
 8002d3c:	e7f9      	b.n	8002d32 <MX_SPI3_Init+0x36>
 8002d3e:	bf00      	nop
 8002d40:	20000178 	.word	0x20000178
 8002d44:	40003c00 	.word	0x40003c00
 8002d48:	08003748 	.word	0x08003748

08002d4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8002d50:	6803      	ldr	r3, [r0, #0]
 8002d52:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <HAL_SPI_MspInit+0xac>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_SPI_MspInit+0x16>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8002d58:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <HAL_SPI_MspInit+0xb0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d026      	beq.n	8002dac <HAL_SPI_MspInit+0x60>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002d5e:	b008      	add	sp, #32
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d62:	2310      	movs	r3, #16
 8002d64:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d66:	2301      	movs	r3, #1
 8002d68:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d6a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2503      	movs	r5, #3
 8002d6e:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	4c23      	ldr	r4, [pc, #140]	; (8002e00 <HAL_SPI_MspInit+0xb4>)
 8002d72:	a903      	add	r1, sp, #12
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7fd ffe7 	bl	8000d48 <HAL_GPIO_Init>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	9101      	str	r1, [sp, #4]
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <HAL_SPI_MspInit+0xb8>)
 8002d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d92:	23e0      	movs	r3, #224	; 0xe0
 8002d94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	9105      	str	r1, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d9e:	2305      	movs	r3, #5
 8002da0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	a903      	add	r1, sp, #12
 8002da4:	4620      	mov	r0, r4
 8002da6:	f7fd ffcf 	bl	8000d48 <HAL_GPIO_Init>
 8002daa:	e7d8      	b.n	8002d5e <HAL_SPI_MspInit+0x12>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dac:	2400      	movs	r4, #0
 8002dae:	9402      	str	r4, [sp, #8]
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_SPI_MspInit+0xb8>)
 8002db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	2602      	movs	r6, #2
 8002dca:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2503      	movs	r5, #3
 8002dd0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd6:	a903      	add	r1, sp, #12
 8002dd8:	480b      	ldr	r0, [pc, #44]	; (8002e08 <HAL_SPI_MspInit+0xbc>)
 8002dda:	f7fd ffb5 	bl	8000d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002de2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dea:	2306      	movs	r3, #6
 8002dec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dee:	a903      	add	r1, sp, #12
 8002df0:	4806      	ldr	r0, [pc, #24]	; (8002e0c <HAL_SPI_MspInit+0xc0>)
 8002df2:	f7fd ffa9 	bl	8000d48 <HAL_GPIO_Init>
}
 8002df6:	e7b2      	b.n	8002d5e <HAL_SPI_MspInit+0x12>
 8002df8:	40013000 	.word	0x40013000
 8002dfc:	40003c00 	.word	0x40003c00
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800

08002e10 <SPI_receive>:
}

/* USER CODE BEGIN 1 */

// Obtains data from external ADC via SPI
uint16_t SPI_receive(uint16_t mode){
 8002e10:	b510      	push	{r4, lr}
 8002e12:	b082      	sub	sp, #8

    uint8_t spiSend[2];
    spiSend[0] = mode >> 8;
 8002e14:	0a03      	lsrs	r3, r0, #8
 8002e16:	f88d 3004 	strb.w	r3, [sp, #4]
    spiSend[1] = mode & 0xFF;
 8002e1a:	f88d 0005 	strb.w	r0, [sp, #5]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002e1e:	4c24      	ldr	r4, [pc, #144]	; (8002eb0 <SPI_receive+0xa0>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	2110      	movs	r1, #16
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7fe f86f 	bl	8000f08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, spiSend, 2, 10);
 8002e2a:	230a      	movs	r3, #10
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	a901      	add	r1, sp, #4
 8002e30:	4820      	ldr	r0, [pc, #128]	; (8002eb4 <SPI_receive+0xa4>)
 8002e32:	f7fe fc36 	bl	80016a2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002e36:	2201      	movs	r2, #1
 8002e38:	2110      	movs	r1, #16
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7fe f864 	bl	8000f08 <HAL_GPIO_WritePin>
    for (uint16_t i = 0; i < 500; i++) {}
 8002e40:	2300      	movs	r3, #0
 8002e42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e46:	d202      	bcs.n	8002e4e <SPI_receive+0x3e>
 8002e48:	3301      	adds	r3, #1
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	e7f9      	b.n	8002e42 <SPI_receive+0x32>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002e4e:	4c18      	ldr	r4, [pc, #96]	; (8002eb0 <SPI_receive+0xa0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	2110      	movs	r1, #16
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7fe f857 	bl	8000f08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, spiSend, 2, 10);
 8002e5a:	230a      	movs	r3, #10
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	a901      	add	r1, sp, #4
 8002e60:	4814      	ldr	r0, [pc, #80]	; (8002eb4 <SPI_receive+0xa4>)
 8002e62:	f7fe fc1e 	bl	80016a2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002e66:	2201      	movs	r2, #1
 8002e68:	2110      	movs	r1, #16
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7fe f84c 	bl	8000f08 <HAL_GPIO_WritePin>
    for (uint16_t i = 0; i < 500; i++) {}
 8002e70:	2300      	movs	r3, #0
 8002e72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e76:	d202      	bcs.n	8002e7e <SPI_receive+0x6e>
 8002e78:	3301      	adds	r3, #1
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	e7f9      	b.n	8002e72 <SPI_receive+0x62>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002e7e:	4c0c      	ldr	r4, [pc, #48]	; (8002eb0 <SPI_receive+0xa0>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	2110      	movs	r1, #16
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7fe f83f 	bl	8000f08 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(&hspi1, spiSend, 2, 10);
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	a901      	add	r1, sp, #4
 8002e90:	4808      	ldr	r0, [pc, #32]	; (8002eb4 <SPI_receive+0xa4>)
 8002e92:	f7fe fdf5 	bl	8001a80 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002e96:	2201      	movs	r2, #1
 8002e98:	2110      	movs	r1, #16
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f7fe f834 	bl	8000f08 <HAL_GPIO_WritePin>
    return (spiSend[0] << 8) | (spiSend[1] & 0xFF);
 8002ea0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002ea4:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
 8002ea8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002eac:	b002      	add	sp, #8
 8002eae:	bd10      	pop	{r4, pc}
 8002eb0:	40020000 	.word	0x40020000
 8002eb4:	200001d0 	.word	0x200001d0

08002eb8 <SPI_rFastPrepare>:

void SPI_rFastPrepare(uint8_t dataTx[]){
 8002eb8:	b530      	push	{r4, r5, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	4605      	mov	r5, r0
  uint16_t spiTxBank[2]={0,0};
  // Shock pots, pitot tube
  // right is sen1-6
  spiTxBank[0] = SPI_receive(AN_RX_SPI_SHOCK_POT1);
 8002ebe:	f44f 50ca 	mov.w	r0, #6464	; 0x1940
 8002ec2:	f7ff ffa5 	bl	8002e10 <SPI_receive>
 8002ec6:	4604      	mov	r4, r0
  spiTxBank[1] = SPI_receive(AN_RX_SPI_PITOT_TUBE_RESERVE);
 8002ec8:	f44f 50d6 	mov.w	r0, #6848	; 0x1ac0
 8002ecc:	f7ff ffa0 	bl	8002e10 <SPI_receive>
  uint16_t volatile adcDataOne = (spiTxBank[0] & 0xFFF) * TWELVE_2_SIXTEEN;
 8002ed0:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002edc:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee8:	ee17 3a90 	vmov	r3, s15
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t volatile adcDataTwo = (spiTxBank[1] & 0xFFF) * TWELVE_2_SIXTEEN;
 8002ef2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f06:	ee17 3a90 	vmov	r3, s15
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f8ad 3004 	strh.w	r3, [sp, #4]
  dataTx[2] = adcDataOne >> 8;
 8002f10:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002f14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002f18:	70ab      	strb	r3, [r5, #2]
  dataTx[3] = adcDataOne & 0xFF;
 8002f1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002f1e:	70eb      	strb	r3, [r5, #3]
  dataTx[4] = adcDataTwo >> 8;
 8002f20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002f24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002f28:	712b      	strb	r3, [r5, #4]
  dataTx[5] = adcDataTwo & 0xFF;
 8002f2a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002f2e:	716b      	strb	r3, [r5, #5]
}
 8002f30:	b003      	add	sp, #12
 8002f32:	bd30      	pop	{r4, r5, pc}

08002f34 <SPI_lFastPrepare>:

void SPI_lFastPrepare(uint8_t dataTx[]){
 8002f34:	b510      	push	{r4, lr}
 8002f36:	4604      	mov	r4, r0
  uint16_t spiTxBank[2]={0,0};
  spiTxBank[0] = SPI_receive(AN_RX_SPI_SHOCK_POT2_RESERVE);
 8002f38:	f44f 50e2 	mov.w	r0, #7232	; 0x1c40
 8002f3c:	f7ff ff68 	bl	8002e10 <SPI_receive>
  uint16_t adcDataOne = (spiTxBank[0] & 0xFFF) * TWELVE_2_SIXTEEN;
 8002f40:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002f44:	ee07 3a90 	vmov	s15, r3
 8002f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f4c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f58:	ee17 3a90 	vmov	r3, s15
  uint16_t adcDataTwo = (spiTxBank[1] & 0xFFF) * TWELVE_2_SIXTEEN;
  dataTx[2] = adcDataOne >> 8;
 8002f5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002f60:	70a2      	strb	r2, [r4, #2]
  dataTx[3] = adcDataOne & 0xFF;
 8002f62:	70e3      	strb	r3, [r4, #3]
  dataTx[4] = adcDataTwo >> 8;
 8002f64:	2300      	movs	r3, #0
 8002f66:	7123      	strb	r3, [r4, #4]
  dataTx[5] = adcDataTwo & 0xFF;
 8002f68:	7163      	strb	r3, [r4, #5]
}
 8002f6a:	bd10      	pop	{r4, pc}

08002f6c <SPI_rSlowPrepare>:

void SPI_rSlowPrepare(uint8_t dataTx[]){
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	ed2d 8b02 	vpush	{d8}
 8002f72:	4605      	mov	r5, r0
  uint16_t spiTxBank[2]={0,0};
  spiTxBank[0] = SPI_receive(AN_RX_SPI_ROTOR1);
 8002f74:	f44f 50de 	mov.w	r0, #7104	; 0x1bc0
 8002f78:	f7ff ff4a 	bl	8002e10 <SPI_receive>
 8002f7c:	4604      	mov	r4, r0
  spiTxBank[1] = SPI_receive(AN_RX_SPI_CALIPER_TEMP1);
 8002f7e:	f44f 50da 	mov.w	r0, #6976	; 0x1b40
 8002f82:	f7ff ff45 	bl	8002e10 <SPI_receive>
  uint16_t adcDataOne = (spiTxBank[0] & 0xFFF) * TWELVE_2_SIXTEEN;
 8002f86:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f92:	eeb3 8a00 	vmov.f32	s16, #48	; 0x41800000  16.0
 8002f96:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9e:	ee17 3a90 	vmov	r3, s15
  uint16_t adcDataTwo = (spiTxBank[1] & 0xFFF) * TWELVE_2_SIXTEEN;
 8002fa2:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8002fa6:	ee07 2a90 	vmov	s15, r2
 8002faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fae:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb6:	ee17 2a90 	vmov	r2, s15
  dataTx[0] = adcDataOne >> 8;
 8002fba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002fbe:	7029      	strb	r1, [r5, #0]
  dataTx[1] = adcDataOne & 0xFF;
 8002fc0:	706b      	strb	r3, [r5, #1]
  dataTx[2] = adcDataTwo >> 8;
 8002fc2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002fc6:	70ab      	strb	r3, [r5, #2]
  dataTx[3] = adcDataTwo & 0xFF;
 8002fc8:	70ea      	strb	r2, [r5, #3]
  spiTxBank[0] = SPI_receive(AN_RX_SPI_RADIATOR_GEARBOX_TEMP1);
 8002fca:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8002fce:	f7ff ff1f 	bl	8002e10 <SPI_receive>
 8002fd2:	4604      	mov	r4, r0
  spiTxBank[1] = SPI_receive(AN_RX_SPI_RADIATOR_TEMP2_RESERVE);
 8002fd4:	f44f 50ce 	mov.w	r0, #6592	; 0x19c0
 8002fd8:	f7ff ff1a 	bl	8002e10 <SPI_receive>
  uint16_t adcDataThree = (spiTxBank[0] & 0xFFF) * TWELVE_2_SIXTEEN;
 8002fdc:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff0:	ee17 3a90 	vmov	r3, s15
  uint16_t adcDataFour = (spiTxBank[1] & 0xFFF) * TWELVE_2_SIXTEEN;
 8002ff4:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8002ff8:	ee07 2a90 	vmov	s15, r2
 8002ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003000:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003008:	ee17 2a90 	vmov	r2, s15
  dataTx[4] = adcDataThree >> 8;
 800300c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003010:	7129      	strb	r1, [r5, #4]
  dataTx[5] = adcDataThree & 0xFF;
 8003012:	716b      	strb	r3, [r5, #5]
  dataTx[6] = adcDataFour >> 8;
 8003014:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003018:	71ab      	strb	r3, [r5, #6]
  dataTx[7] = adcDataFour & 0xFF;
 800301a:	71ea      	strb	r2, [r5, #7]
}
 800301c:	ecbd 8b02 	vpop	{d8}
 8003020:	bd38      	pop	{r3, r4, r5, pc}

08003022 <SPI_lSlowPrepare>:

void SPI_lSlowPrepare(uint8_t dataTx[]){
 8003022:	b538      	push	{r3, r4, r5, lr}
 8003024:	ed2d 8b02 	vpush	{d8}
 8003028:	4605      	mov	r5, r0
  uint16_t spiTxBank[2]={0,0};
  spiTxBank[0] = SPI_receive(AN_RX_SPI_ROTOR2);
 800302a:	f44f 50f2 	mov.w	r0, #7744	; 0x1e40
 800302e:	f7ff feef 	bl	8002e10 <SPI_receive>
 8003032:	4604      	mov	r4, r0
  spiTxBank[1] = SPI_receive(AN_RX_SPI_CALIPER_TEMP2);
 8003034:	f44f 50ee 	mov.w	r0, #7616	; 0x1dc0
 8003038:	f7ff feea 	bl	8002e10 <SPI_receive>
  uint16_t adcDataOne = (spiTxBank[0] & 0xFFF) * TWELVE_2_SIXTEEN;
 800303c:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003048:	eeb3 8a00 	vmov.f32	s16, #48	; 0x41800000  16.0
 800304c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003054:	ee17 3a90 	vmov	r3, s15
  uint16_t adcDataTwo = (spiTxBank[1] & 0xFFF) * TWELVE_2_SIXTEEN;
 8003058:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800305c:	ee07 2a90 	vmov	s15, r2
 8003060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003064:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800306c:	ee17 2a90 	vmov	r2, s15
  dataTx[0] = adcDataOne >> 8;
 8003070:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003074:	7029      	strb	r1, [r5, #0]
  dataTx[1] = adcDataOne & 0xFF;
 8003076:	706b      	strb	r3, [r5, #1]
  dataTx[2] = adcDataTwo >> 8;
 8003078:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800307c:	70ab      	strb	r3, [r5, #2]
  dataTx[3] = adcDataTwo & 0xFF;
 800307e:	70ea      	strb	r2, [r5, #3]
  spiTxBank[0] = SPI_receive(AN_RX_SPI_RADIATOR_TEMP3_GEARBOX_TEMP_2);
 8003080:	f44f 50ea 	mov.w	r0, #7488	; 0x1d40
 8003084:	f7ff fec4 	bl	8002e10 <SPI_receive>
 8003088:	4604      	mov	r4, r0
  spiTxBank[1] = SPI_receive(AN_RX_SPI_RADIATOR_TEMP4_RESERVE);
 800308a:	f44f 50e6 	mov.w	r0, #7360	; 0x1cc0
 800308e:	f7ff febf 	bl	8002e10 <SPI_receive>
  uint16_t adcDataThree = (spiTxBank[0] & 0xFFF) * TWELVE_2_SIXTEEN;
 8003092:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309e:	ee67 7a88 	vmul.f32	s15, s15, s16
 80030a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a6:	ee17 3a90 	vmov	r3, s15
  uint16_t adcDataFour = (spiTxBank[1] & 0xFFF) * TWELVE_2_SIXTEEN;
 80030aa:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80030ae:	ee07 2a90 	vmov	s15, r2
 80030b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80030ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030be:	ee17 2a90 	vmov	r2, s15
  dataTx[4] = adcDataThree >> 8;
 80030c2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80030c6:	7129      	strb	r1, [r5, #4]
  dataTx[5] = adcDataThree & 0xFF;
 80030c8:	716b      	strb	r3, [r5, #5]
  dataTx[6] = adcDataFour >> 8;
 80030ca:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80030ce:	71ab      	strb	r3, [r5, #6]
  dataTx[7] = adcDataFour & 0xFF;
 80030d0:	71ea      	strb	r2, [r5, #7]
}
 80030d2:	ecbd 8b02 	vpop	{d8}
 80030d6:	bd38      	pop	{r3, r4, r5, pc}

080030d8 <SPI_commRegister>:

// Reads from the AD7124-8 strain gauge amp ID register. Read value should be 0x14.
// If this function returns 0x14, it verifies that the SPI lines between the STM
// and the AD7124-8 are working. 0x14 is the designated return value according to the
// AD7124-8's datasheet.
uint16_t SPI_commRegister() {
 80030d8:	b510      	push	{r4, lr}
 80030da:	b082      	sub	sp, #8
	uint16_t newData;
	uint8_t rxData[1];
	rxData[0] = 0x45; // Address of communications register to read from
 80030dc:	2345      	movs	r3, #69	; 0x45
 80030de:	f88d 3004 	strb.w	r3, [sp, #4]
	rxData[1] = 0xFF;
 80030e2:	23ff      	movs	r3, #255	; 0xff
 80030e4:	f88d 3005 	strb.w	r3, [sp, #5]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Sets Chip Select pin low
 80030e8:	4c0a      	ldr	r4, [pc, #40]	; (8003114 <SPI_commRegister+0x3c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	2104      	movs	r1, #4
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7fd ff0a 	bl	8000f08 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi3, rxData, 2, 100); // Read from Communications register
 80030f4:	2364      	movs	r3, #100	; 0x64
 80030f6:	2202      	movs	r2, #2
 80030f8:	a901      	add	r1, sp, #4
 80030fa:	4807      	ldr	r0, [pc, #28]	; (8003118 <SPI_commRegister+0x40>)
 80030fc:	f7fe fcc0 	bl	8001a80 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003100:	2201      	movs	r2, #1
 8003102:	2104      	movs	r1, #4
 8003104:	4620      	mov	r0, r4
 8003106:	f7fd feff 	bl	8000f08 <HAL_GPIO_WritePin>

	newData = rxData[0] >> 8;
	newData = newData + rxData[1];
	return newData;
}
 800310a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800310e:	b002      	add	sp, #8
 8003110:	bd10      	pop	{r4, pc}
 8003112:	bf00      	nop
 8003114:	40020400 	.word	0x40020400
 8003118:	20000178 	.word	0x20000178

0800311c <SPI_commRegisterTrue>:
void SPI_commRegisterTrue(void){
 800311c:	b508      	push	{r3, lr}
	int correctRegister = SPI_commRegister();
 800311e:	f7ff ffdb 	bl	80030d8 <SPI_commRegister>
	if (correctRegister == 0x14)
 8003122:	2814      	cmp	r0, #20
 8003124:	d000      	beq.n	8003128 <SPI_commRegisterTrue+0xc>
}
 8003126:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003128:	2201      	movs	r2, #1
 800312a:	2140      	movs	r1, #64	; 0x40
 800312c:	4801      	ldr	r0, [pc, #4]	; (8003134 <SPI_commRegisterTrue+0x18>)
 800312e:	f7fd feeb 	bl	8000f08 <HAL_GPIO_WritePin>
}
 8003132:	e7f8      	b.n	8003126 <SPI_commRegisterTrue+0xa>
 8003134:	40020800 	.word	0x40020800

08003138 <SPI_write16>:

// Writes to registers of AD7124-8 that require 16-bit commands. First parameter
// indicates address of that register.
void SPI_write16(uint8_t address, uint16_t command) {
 8003138:	b510      	push	{r4, lr}
 800313a:	b082      	sub	sp, #8
	uint8_t txData[5];
	txData[0] = address;
 800313c:	f88d 0000 	strb.w	r0, [sp]
	txData[1] = (command & 0xFF00) >> 8;
 8003140:	0a0b      	lsrs	r3, r1, #8
 8003142:	f88d 3001 	strb.w	r3, [sp, #1]
	txData[2] = command & 0x00FF;
 8003146:	f88d 1002 	strb.w	r1, [sp, #2]
	txData[3] = 0xFF;
 800314a:	23ff      	movs	r3, #255	; 0xff
 800314c:	f88d 3003 	strb.w	r3, [sp, #3]
	txData[4] = 0xFF;
 8003150:	f88d 3004 	strb.w	r3, [sp, #4]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Sets Chip Select pin low
 8003154:	4c09      	ldr	r4, [pc, #36]	; (800317c <SPI_write16+0x44>)
 8003156:	2200      	movs	r2, #0
 8003158:	2104      	movs	r1, #4
 800315a:	4620      	mov	r0, r4
 800315c:	f7fd fed4 	bl	8000f08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, txData, 5, 100); // Transmit data
 8003160:	2364      	movs	r3, #100	; 0x64
 8003162:	2205      	movs	r2, #5
 8003164:	4669      	mov	r1, sp
 8003166:	4806      	ldr	r0, [pc, #24]	; (8003180 <SPI_write16+0x48>)
 8003168:	f7fe fa9b 	bl	80016a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Sets CS pin high
 800316c:	2201      	movs	r2, #1
 800316e:	2104      	movs	r1, #4
 8003170:	4620      	mov	r0, r4
 8003172:	f7fd fec9 	bl	8000f08 <HAL_GPIO_WritePin>
}
 8003176:	b002      	add	sp, #8
 8003178:	bd10      	pop	{r4, pc}
 800317a:	bf00      	nop
 800317c:	40020400 	.word	0x40020400
 8003180:	20000178 	.word	0x20000178

08003184 <SPI_write24>:

// Writes to registers of AD7124-8 that require 24-bit commands. First parameter
// indicates address of that register.
void SPI_write24(uint8_t address, uint32_t command) {
 8003184:	b510      	push	{r4, lr}
 8003186:	b082      	sub	sp, #8
	uint8_t txData[7];
	txData[0] = address;
 8003188:	f88d 0000 	strb.w	r0, [sp]
	txData[1] = (command & 0xFF0000) >> 16;
 800318c:	0c0b      	lsrs	r3, r1, #16
 800318e:	f88d 3001 	strb.w	r3, [sp, #1]
	txData[2] = (command & 0x00FF00) >> 8;
 8003192:	0a0b      	lsrs	r3, r1, #8
 8003194:	f88d 3002 	strb.w	r3, [sp, #2]
	txData[3] = command & 0x0000FF;
 8003198:	f88d 1003 	strb.w	r1, [sp, #3]
	txData[4] = 0xFF;
 800319c:	23ff      	movs	r3, #255	; 0xff
 800319e:	f88d 3004 	strb.w	r3, [sp, #4]
	txData[5] = 0xFF;
 80031a2:	f88d 3005 	strb.w	r3, [sp, #5]
	txData[6] = 0xFF;
 80031a6:	f88d 3006 	strb.w	r3, [sp, #6]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Sets Chip Select pin low
 80031aa:	4c09      	ldr	r4, [pc, #36]	; (80031d0 <SPI_write24+0x4c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	2104      	movs	r1, #4
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7fd fea9 	bl	8000f08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, txData, 7, 100); // Transmit data
 80031b6:	2364      	movs	r3, #100	; 0x64
 80031b8:	2207      	movs	r2, #7
 80031ba:	4669      	mov	r1, sp
 80031bc:	4805      	ldr	r0, [pc, #20]	; (80031d4 <SPI_write24+0x50>)
 80031be:	f7fe fa70 	bl	80016a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Sets CS pin high
 80031c2:	2201      	movs	r2, #1
 80031c4:	2104      	movs	r1, #4
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7fd fe9e 	bl	8000f08 <HAL_GPIO_WritePin>
}
 80031cc:	b002      	add	sp, #8
 80031ce:	bd10      	pop	{r4, pc}
 80031d0:	40020400 	.word	0x40020400
 80031d4:	20000178 	.word	0x20000178

080031d8 <SPI_dataRead>:
*  The inital ADC value has a 24-bit resolution, so it has to be divided by 2^24
*  or 0x1000000, then multiplied by the chip's voltage reference, and then divided by
*  the chosen ADC gain. This will yield the voltage differential of the strain gauge amplifier.
*  For now, this calculation is commented out, and the raw ADC value is returned instead.
*/
uint32_t SPI_dataRead(int address, int gain) {
 80031d8:	b510      	push	{r4, lr}
 80031da:	b082      	sub	sp, #8
	uint8_t rxData[4];
	rxData[0] = address;
 80031dc:	f88d 0004 	strb.w	r0, [sp, #4]
	rxData[1] = 0xFF;
 80031e0:	23ff      	movs	r3, #255	; 0xff
 80031e2:	f88d 3005 	strb.w	r3, [sp, #5]
	rxData[2] = 0xFF;
 80031e6:	f88d 3006 	strb.w	r3, [sp, #6]
	rxData[3] = 0xFF;
 80031ea:	f88d 3007 	strb.w	r3, [sp, #7]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80031ee:	4c0f      	ldr	r4, [pc, #60]	; (800322c <SPI_dataRead+0x54>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	2104      	movs	r1, #4
 80031f4:	4620      	mov	r0, r4
 80031f6:	f7fd fe87 	bl	8000f08 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi3, rxData, 4, 100);
 80031fa:	2364      	movs	r3, #100	; 0x64
 80031fc:	2204      	movs	r2, #4
 80031fe:	eb0d 0102 	add.w	r1, sp, r2
 8003202:	480b      	ldr	r0, [pc, #44]	; (8003230 <SPI_dataRead+0x58>)
 8003204:	f7fe fc3c 	bl	8001a80 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003208:	2201      	movs	r2, #1
 800320a:	2104      	movs	r1, #4
 800320c:	4620      	mov	r0, r4
 800320e:	f7fd fe7b 	bl	8000f08 <HAL_GPIO_WritePin>

	int data = (rxData[1] << 16) | rxData[2] << 8 | rxData[3];
 8003212:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8003216:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003220:	f89d 0007 	ldrb.w	r0, [sp, #7]
	//double ADC_value = ((data / 0x1000000) * V_REF) / gain;
	return data;
}
 8003224:	4318      	orrs	r0, r3
 8003226:	b002      	add	sp, #8
 8003228:	bd10      	pop	{r4, pc}
 800322a:	bf00      	nop
 800322c:	40020400 	.word	0x40020400
 8003230:	20000178 	.word	0x20000178

08003234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003234:	b510      	push	{r4, lr}
 8003236:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003238:	2400      	movs	r4, #0
 800323a:	9400      	str	r4, [sp, #0]
 800323c:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <HAL_MspInit+0x90>)
 800323e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
 8003246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003248:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800324c:	9200      	str	r2, [sp, #0]
 800324e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003250:	9401      	str	r4, [sp, #4]
 8003252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003254:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003264:	2003      	movs	r0, #3
 8003266:	f7fd fcf1 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800326a:	4622      	mov	r2, r4
 800326c:	4621      	mov	r1, r4
 800326e:	f06f 000b 	mvn.w	r0, #11
 8003272:	f7fd fcfd 	bl	8000c70 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003276:	4622      	mov	r2, r4
 8003278:	4621      	mov	r1, r4
 800327a:	f06f 000a 	mvn.w	r0, #10
 800327e:	f7fd fcf7 	bl	8000c70 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003282:	4622      	mov	r2, r4
 8003284:	4621      	mov	r1, r4
 8003286:	f06f 0009 	mvn.w	r0, #9
 800328a:	f7fd fcf1 	bl	8000c70 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800328e:	4622      	mov	r2, r4
 8003290:	4621      	mov	r1, r4
 8003292:	f06f 0004 	mvn.w	r0, #4
 8003296:	f7fd fceb 	bl	8000c70 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800329a:	4622      	mov	r2, r4
 800329c:	4621      	mov	r1, r4
 800329e:	f06f 0003 	mvn.w	r0, #3
 80032a2:	f7fd fce5 	bl	8000c70 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80032a6:	4622      	mov	r2, r4
 80032a8:	4621      	mov	r1, r4
 80032aa:	f06f 0001 	mvn.w	r0, #1
 80032ae:	f7fd fcdf 	bl	8000c70 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80032b2:	4622      	mov	r2, r4
 80032b4:	4621      	mov	r1, r4
 80032b6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ba:	f7fd fcd9 	bl	8000c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032be:	b002      	add	sp, #8
 80032c0:	bd10      	pop	{r4, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800

080032c8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032c8:	4770      	bx	lr

080032ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ca:	e7fe      	b.n	80032ca <HardFault_Handler>

080032cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032cc:	e7fe      	b.n	80032cc <MemManage_Handler>

080032ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <BusFault_Handler>

080032d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <UsageFault_Handler>

080032d2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032d2:	4770      	bx	lr

080032d4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d4:	4770      	bx	lr

080032d6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032d6:	4770      	bx	lr

080032d8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80032d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032da:	f7fd f94d 	bl	8000578 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80032de:	f7fd fd2e 	bl	8000d3e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032e2:	bd08      	pop	{r3, pc}

080032e4 <CAN1_RX0_IRQHandler>:

/**
* @brief This function handles CAN1 RX0 interrupt.
*/
void CAN1_RX0_IRQHandler(void)
{
 80032e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80032e6:	4802      	ldr	r0, [pc, #8]	; (80032f0 <CAN1_RX0_IRQHandler+0xc>)
 80032e8:	f7fd fb8a 	bl	8000a00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80032ec:	bd08      	pop	{r3, pc}
 80032ee:	bf00      	nop
 80032f0:	2000014c 	.word	0x2000014c

080032f4 <CAN1_RX1_IRQHandler>:

/**
* @brief This function handles CAN1 RX1 interrupt.
*/
void CAN1_RX1_IRQHandler(void)
{
 80032f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80032f6:	4802      	ldr	r0, [pc, #8]	; (8003300 <CAN1_RX1_IRQHandler+0xc>)
 80032f8:	f7fd fb82 	bl	8000a00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80032fc:	bd08      	pop	{r3, pc}
 80032fe:	bf00      	nop
 8003300:	2000014c 	.word	0x2000014c

08003304 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8003304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003306:	4802      	ldr	r0, [pc, #8]	; (8003310 <TIM2_IRQHandler+0xc>)
 8003308:	f7fe fd86 	bl	8001e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800330c:	bd08      	pop	{r3, pc}
 800330e:	bf00      	nop
 8003310:	200002a0 	.word	0x200002a0

08003314 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8003314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003316:	4802      	ldr	r0, [pc, #8]	; (8003320 <TIM4_IRQHandler+0xc>)
 8003318:	f7fe fd7e 	bl	8001e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800331c:	bd08      	pop	{r3, pc}
 800331e:	bf00      	nop
 8003320:	20000228 	.word	0x20000228

08003324 <TIM5_IRQHandler>:

/**
* @brief This function handles TIM5 global interrupt.
*/
void TIM5_IRQHandler(void)
{
 8003324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003326:	4802      	ldr	r0, [pc, #8]	; (8003330 <TIM5_IRQHandler+0xc>)
 8003328:	f7fe fd76 	bl	8001e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800332c:	bd08      	pop	{r3, pc}
 800332e:	bf00      	nop
 8003330:	20000264 	.word	0x20000264

08003334 <CAN2_RX0_IRQHandler>:

/**
* @brief This function handles CAN2 RX0 interrupt.
*/
void CAN2_RX0_IRQHandler(void)
{
 8003334:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003336:	4802      	ldr	r0, [pc, #8]	; (8003340 <CAN2_RX0_IRQHandler+0xc>)
 8003338:	f7fd fb62 	bl	8000a00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800333c:	bd08      	pop	{r3, pc}
 800333e:	bf00      	nop
 8003340:	20000124 	.word	0x20000124

08003344 <CAN2_RX1_IRQHandler>:

/**
* @brief This function handles CAN2 RX1 interrupt.
*/
void CAN2_RX1_IRQHandler(void)
{
 8003344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003346:	4802      	ldr	r0, [pc, #8]	; (8003350 <CAN2_RX1_IRQHandler+0xc>)
 8003348:	f7fd fb5a 	bl	8000a00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800334c:	bd08      	pop	{r3, pc}
 800334e:	bf00      	nop
 8003350:	20000124 	.word	0x20000124

08003354 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003354:	490f      	ldr	r1, [pc, #60]	; (8003394 <SystemInit+0x40>)
 8003356:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800335a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <SystemInit+0x44>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800336c:	2000      	movs	r0, #0
 800336e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003376:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800337a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800337c:	4a07      	ldr	r2, [pc, #28]	; (800339c <SystemInit+0x48>)
 800337e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003386:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003388:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800338a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800338e:	608b      	str	r3, [r1, #8]
#endif
}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	e000ed00 	.word	0xe000ed00
 8003398:	40023800 	.word	0x40023800
 800339c:	24003010 	.word	0x24003010

080033a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033a0:	b500      	push	{lr}
 80033a2:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
 80033a4:	481a      	ldr	r0, [pc, #104]	; (8003410 <MX_TIM2_Init+0x70>)
 80033a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033aa:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 9;
 80033ac:	2309      	movs	r3, #9
 80033ae:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b0:	2300      	movs	r3, #0
 80033b2:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0x4C4B40;
 80033b4:	4a17      	ldr	r2, [pc, #92]	; (8003414 <MX_TIM2_Init+0x74>)
 80033b6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b8:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80033ba:	f7fe fe65 	bl	8002088 <HAL_TIM_IC_Init>
 80033be:	b9b8      	cbnz	r0, 80033f0 <MX_TIM2_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033c0:	2300      	movs	r3, #0
 80033c2:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c4:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033c6:	a904      	add	r1, sp, #16
 80033c8:	4811      	ldr	r0, [pc, #68]	; (8003410 <MX_TIM2_Init+0x70>)
 80033ca:	f7fe ff54 	bl	8002276 <HAL_TIMEx_MasterConfigSynchronization>
 80033ce:	b9a0      	cbnz	r0, 80033fa <MX_TIM2_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80033d0:	2300      	movs	r3, #0
 80033d2:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80033d4:	2201      	movs	r2, #1
 80033d6:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033d8:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 15;
 80033da:	230f      	movs	r3, #15
 80033dc:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80033de:	2208      	movs	r2, #8
 80033e0:	4669      	mov	r1, sp
 80033e2:	480b      	ldr	r0, [pc, #44]	; (8003410 <MX_TIM2_Init+0x70>)
 80033e4:	f7fe fea8 	bl	8002138 <HAL_TIM_IC_ConfigChannel>
 80033e8:	b960      	cbnz	r0, 8003404 <MX_TIM2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80033ea:	b007      	add	sp, #28
 80033ec:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80033f0:	214d      	movs	r1, #77	; 0x4d
 80033f2:	4809      	ldr	r0, [pc, #36]	; (8003418 <MX_TIM2_Init+0x78>)
 80033f4:	f7ff fb92 	bl	8002b1c <_Error_Handler>
 80033f8:	e7e2      	b.n	80033c0 <MX_TIM2_Init+0x20>
    _Error_Handler(__FILE__, __LINE__);
 80033fa:	2154      	movs	r1, #84	; 0x54
 80033fc:	4806      	ldr	r0, [pc, #24]	; (8003418 <MX_TIM2_Init+0x78>)
 80033fe:	f7ff fb8d 	bl	8002b1c <_Error_Handler>
 8003402:	e7e5      	b.n	80033d0 <MX_TIM2_Init+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8003404:	215d      	movs	r1, #93	; 0x5d
 8003406:	4804      	ldr	r0, [pc, #16]	; (8003418 <MX_TIM2_Init+0x78>)
 8003408:	f7ff fb88 	bl	8002b1c <_Error_Handler>
}
 800340c:	e7ed      	b.n	80033ea <MX_TIM2_Init+0x4a>
 800340e:	bf00      	nop
 8003410:	200002a0 	.word	0x200002a0
 8003414:	004c4b40 	.word	0x004c4b40
 8003418:	08003758 	.word	0x08003758

0800341c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800341c:	b500      	push	{lr}
 800341e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8003420:	4817      	ldr	r0, [pc, #92]	; (8003480 <MX_TIM4_Init+0x64>)
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <MX_TIM4_Init+0x68>)
 8003424:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 249;
 8003426:	23f9      	movs	r3, #249	; 0xf9
 8003428:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342a:	2300      	movs	r3, #0
 800342c:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 99;
 800342e:	2263      	movs	r2, #99	; 0x63
 8003430:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003432:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003434:	f7fe fe0e 	bl	8002054 <HAL_TIM_Base_Init>
 8003438:	b990      	cbnz	r0, 8003460 <MX_TIM4_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800343a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003440:	a902      	add	r1, sp, #8
 8003442:	480f      	ldr	r0, [pc, #60]	; (8003480 <MX_TIM4_Init+0x64>)
 8003444:	f7fe fc60 	bl	8001d08 <HAL_TIM_ConfigClockSource>
 8003448:	b978      	cbnz	r0, 800346a <MX_TIM4_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003450:	4669      	mov	r1, sp
 8003452:	480b      	ldr	r0, [pc, #44]	; (8003480 <MX_TIM4_Init+0x64>)
 8003454:	f7fe ff0f 	bl	8002276 <HAL_TIMEx_MasterConfigSynchronization>
 8003458:	b960      	cbnz	r0, 8003474 <MX_TIM4_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800345a:	b007      	add	sp, #28
 800345c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003460:	216e      	movs	r1, #110	; 0x6e
 8003462:	4809      	ldr	r0, [pc, #36]	; (8003488 <MX_TIM4_Init+0x6c>)
 8003464:	f7ff fb5a 	bl	8002b1c <_Error_Handler>
 8003468:	e7e7      	b.n	800343a <MX_TIM4_Init+0x1e>
    _Error_Handler(__FILE__, __LINE__);
 800346a:	2174      	movs	r1, #116	; 0x74
 800346c:	4806      	ldr	r0, [pc, #24]	; (8003488 <MX_TIM4_Init+0x6c>)
 800346e:	f7ff fb55 	bl	8002b1c <_Error_Handler>
 8003472:	e7ea      	b.n	800344a <MX_TIM4_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 8003474:	217b      	movs	r1, #123	; 0x7b
 8003476:	4804      	ldr	r0, [pc, #16]	; (8003488 <MX_TIM4_Init+0x6c>)
 8003478:	f7ff fb50 	bl	8002b1c <_Error_Handler>
}
 800347c:	e7ed      	b.n	800345a <MX_TIM4_Init+0x3e>
 800347e:	bf00      	nop
 8003480:	20000228 	.word	0x20000228
 8003484:	40000800 	.word	0x40000800
 8003488:	08003758 	.word	0x08003758

0800348c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800348c:	b500      	push	{lr}
 800348e:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim5.Instance = TIM5;
 8003490:	4819      	ldr	r0, [pc, #100]	; (80034f8 <MX_TIM5_Init+0x6c>)
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <MX_TIM5_Init+0x70>)
 8003494:	6003      	str	r3, [r0, #0]
  htim5.Init.Prescaler = 9;
 8003496:	2309      	movs	r3, #9
 8003498:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800349a:	2300      	movs	r3, #0
 800349c:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 0x4C4B40;
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <MX_TIM5_Init+0x74>)
 80034a0:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a2:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80034a4:	f7fe fdf0 	bl	8002088 <HAL_TIM_IC_Init>
 80034a8:	b9b0      	cbnz	r0, 80034d8 <MX_TIM5_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ae:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034b0:	a904      	add	r1, sp, #16
 80034b2:	4811      	ldr	r0, [pc, #68]	; (80034f8 <MX_TIM5_Init+0x6c>)
 80034b4:	f7fe fedf 	bl	8002276 <HAL_TIMEx_MasterConfigSynchronization>
 80034b8:	b998      	cbnz	r0, 80034e2 <MX_TIM5_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034ba:	2300      	movs	r3, #0
 80034bc:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034be:	2201      	movs	r2, #1
 80034c0:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80034c2:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 0;
 80034c4:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80034c6:	220c      	movs	r2, #12
 80034c8:	4669      	mov	r1, sp
 80034ca:	480b      	ldr	r0, [pc, #44]	; (80034f8 <MX_TIM5_Init+0x6c>)
 80034cc:	f7fe fe34 	bl	8002138 <HAL_TIM_IC_ConfigChannel>
 80034d0:	b960      	cbnz	r0, 80034ec <MX_TIM5_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80034d2:	b007      	add	sp, #28
 80034d4:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80034d8:	218c      	movs	r1, #140	; 0x8c
 80034da:	480a      	ldr	r0, [pc, #40]	; (8003504 <MX_TIM5_Init+0x78>)
 80034dc:	f7ff fb1e 	bl	8002b1c <_Error_Handler>
 80034e0:	e7e3      	b.n	80034aa <MX_TIM5_Init+0x1e>
    _Error_Handler(__FILE__, __LINE__);
 80034e2:	2193      	movs	r1, #147	; 0x93
 80034e4:	4807      	ldr	r0, [pc, #28]	; (8003504 <MX_TIM5_Init+0x78>)
 80034e6:	f7ff fb19 	bl	8002b1c <_Error_Handler>
 80034ea:	e7e6      	b.n	80034ba <MX_TIM5_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 80034ec:	219c      	movs	r1, #156	; 0x9c
 80034ee:	4805      	ldr	r0, [pc, #20]	; (8003504 <MX_TIM5_Init+0x78>)
 80034f0:	f7ff fb14 	bl	8002b1c <_Error_Handler>
}
 80034f4:	e7ed      	b.n	80034d2 <MX_TIM5_Init+0x46>
 80034f6:	bf00      	nop
 80034f8:	20000264 	.word	0x20000264
 80034fc:	40000c00 	.word	0x40000c00
 8003500:	004c4b40 	.word	0x004c4b40
 8003504:	08003758 	.word	0x08003758

08003508 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003508:	b508      	push	{r3, lr}

  htim14.Instance = TIM14;
 800350a:	480a      	ldr	r0, [pc, #40]	; (8003534 <MX_TIM14_Init+0x2c>)
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <MX_TIM14_Init+0x30>)
 800350e:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 5000 - 1;
 8003510:	f241 3387 	movw	r3, #4999	; 0x1387
 8003514:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003516:	2300      	movs	r3, #0
 8003518:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 65536 - 1;
 800351a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800351e:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003520:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003522:	f7fe fd97 	bl	8002054 <HAL_TIM_Base_Init>
 8003526:	b900      	cbnz	r0, 800352a <MX_TIM14_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003528:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800352a:	21ab      	movs	r1, #171	; 0xab
 800352c:	4803      	ldr	r0, [pc, #12]	; (800353c <MX_TIM14_Init+0x34>)
 800352e:	f7ff faf5 	bl	8002b1c <_Error_Handler>
}
 8003532:	e7f9      	b.n	8003528 <MX_TIM14_Init+0x20>
 8003534:	200002dc 	.word	0x200002dc
 8003538:	40002000 	.word	0x40002000
 800353c:	08003758 	.word	0x08003758

08003540 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003540:	b530      	push	{r4, r5, lr}
 8003542:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_icHandle->Instance==TIM2)
 8003544:	6803      	ldr	r3, [r0, #0]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d004      	beq.n	8003556 <HAL_TIM_IC_MspInit+0x16>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_icHandle->Instance==TIM5)
 800354c:	4a23      	ldr	r2, [pc, #140]	; (80035dc <HAL_TIM_IC_MspInit+0x9c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d023      	beq.n	800359a <HAL_TIM_IC_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003552:	b009      	add	sp, #36	; 0x24
 8003554:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003556:	2400      	movs	r4, #0
 8003558:	9401      	str	r4, [sp, #4]
 800355a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800355e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003570:	2304      	movs	r3, #4
 8003572:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800357c:	2501      	movs	r5, #1
 800357e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003580:	a903      	add	r1, sp, #12
 8003582:	4817      	ldr	r0, [pc, #92]	; (80035e0 <HAL_TIM_IC_MspInit+0xa0>)
 8003584:	f7fd fbe0 	bl	8000d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003588:	4622      	mov	r2, r4
 800358a:	4629      	mov	r1, r5
 800358c:	201c      	movs	r0, #28
 800358e:	f7fd fb6f 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003592:	201c      	movs	r0, #28
 8003594:	f7fd fba0 	bl	8000cd8 <HAL_NVIC_EnableIRQ>
 8003598:	e7db      	b.n	8003552 <HAL_TIM_IC_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800359a:	2400      	movs	r4, #0
 800359c:	9402      	str	r4, [sp, #8]
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_TIM_IC_MspInit+0xa4>)
 80035a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a2:	f042 0208 	orr.w	r2, r2, #8
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	9302      	str	r3, [sp, #8]
 80035b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035b2:	2308      	movs	r3, #8
 80035b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035bc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c0:	a903      	add	r1, sp, #12
 80035c2:	4807      	ldr	r0, [pc, #28]	; (80035e0 <HAL_TIM_IC_MspInit+0xa0>)
 80035c4:	f7fd fbc0 	bl	8000d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80035c8:	4622      	mov	r2, r4
 80035ca:	2101      	movs	r1, #1
 80035cc:	2032      	movs	r0, #50	; 0x32
 80035ce:	f7fd fb4f 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80035d2:	2032      	movs	r0, #50	; 0x32
 80035d4:	f7fd fb80 	bl	8000cd8 <HAL_NVIC_EnableIRQ>
}
 80035d8:	e7bb      	b.n	8003552 <HAL_TIM_IC_MspInit+0x12>
 80035da:	bf00      	nop
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40020000 	.word	0x40020000
 80035e4:	40023800 	.word	0x40023800

080035e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035e8:	b500      	push	{lr}
 80035ea:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM4)
 80035ec:	6803      	ldr	r3, [r0, #0]
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <HAL_TIM_Base_MspInit+0x5c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d005      	beq.n	8003600 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_TIM_Base_MspInit+0x60>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d016      	beq.n	8003628 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80035fa:	b003      	add	sp, #12
 80035fc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003600:	2200      	movs	r2, #0
 8003602:	9200      	str	r2, [sp, #0]
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_TIM_Base_MspInit+0x64>)
 8003606:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003608:	f041 0104 	orr.w	r1, r1, #4
 800360c:	6419      	str	r1, [r3, #64]	; 0x40
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8003618:	2102      	movs	r1, #2
 800361a:	201e      	movs	r0, #30
 800361c:	f7fd fb28 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003620:	201e      	movs	r0, #30
 8003622:	f7fd fb59 	bl	8000cd8 <HAL_NVIC_EnableIRQ>
 8003626:	e7e8      	b.n	80035fa <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003628:	2300      	movs	r3, #0
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_TIM_Base_MspInit+0x64>)
 800362e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	9b01      	ldr	r3, [sp, #4]
}
 8003640:	e7db      	b.n	80035fa <HAL_TIM_Base_MspInit+0x12>
 8003642:	bf00      	nop
 8003644:	40000800 	.word	0x40000800
 8003648:	40002000 	.word	0x40002000
 800364c:	40023800 	.word	0x40023800

08003650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003688 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003654:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003656:	e003      	b.n	8003660 <LoopCopyDataInit>

08003658 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800365a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800365c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800365e:	3104      	adds	r1, #4

08003660 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003660:	480b      	ldr	r0, [pc, #44]	; (8003690 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003664:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003666:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003668:	d3f6      	bcc.n	8003658 <CopyDataInit>
  ldr  r2, =_sbss
 800366a:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800366c:	e002      	b.n	8003674 <LoopFillZerobss>

0800366e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800366e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003670:	f842 3b04 	str.w	r3, [r2], #4

08003674 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003676:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003678:	d3f9      	bcc.n	800366e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800367a:	f7ff fe6b 	bl	8003354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800367e:	f000 f811 	bl	80036a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003682:	f7ff fab7 	bl	8002bf4 <main>
  bx  lr    
 8003686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003688:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800368c:	08003778 	.word	0x08003778
  ldr  r0, =_sdata
 8003690:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003694:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8003698:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 800369c:	20000318 	.word	0x20000318

080036a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036a0:	e7fe      	b.n	80036a0 <ADC_IRQHandler>
	...

080036a4 <__libc_init_array>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4d0d      	ldr	r5, [pc, #52]	; (80036dc <__libc_init_array+0x38>)
 80036a8:	4c0d      	ldr	r4, [pc, #52]	; (80036e0 <__libc_init_array+0x3c>)
 80036aa:	1b64      	subs	r4, r4, r5
 80036ac:	10a4      	asrs	r4, r4, #2
 80036ae:	2600      	movs	r6, #0
 80036b0:	42a6      	cmp	r6, r4
 80036b2:	d109      	bne.n	80036c8 <__libc_init_array+0x24>
 80036b4:	4d0b      	ldr	r5, [pc, #44]	; (80036e4 <__libc_init_array+0x40>)
 80036b6:	4c0c      	ldr	r4, [pc, #48]	; (80036e8 <__libc_init_array+0x44>)
 80036b8:	f000 f818 	bl	80036ec <_init>
 80036bc:	1b64      	subs	r4, r4, r5
 80036be:	10a4      	asrs	r4, r4, #2
 80036c0:	2600      	movs	r6, #0
 80036c2:	42a6      	cmp	r6, r4
 80036c4:	d105      	bne.n	80036d2 <__libc_init_array+0x2e>
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036cc:	4798      	blx	r3
 80036ce:	3601      	adds	r6, #1
 80036d0:	e7ee      	b.n	80036b0 <__libc_init_array+0xc>
 80036d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d6:	4798      	blx	r3
 80036d8:	3601      	adds	r6, #1
 80036da:	e7f2      	b.n	80036c2 <__libc_init_array+0x1e>
 80036dc:	08003770 	.word	0x08003770
 80036e0:	08003770 	.word	0x08003770
 80036e4:	08003770 	.word	0x08003770
 80036e8:	08003774 	.word	0x08003774

080036ec <_init>:
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	bf00      	nop
 80036f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f2:	bc08      	pop	{r3}
 80036f4:	469e      	mov	lr, r3
 80036f6:	4770      	bx	lr

080036f8 <_fini>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr
